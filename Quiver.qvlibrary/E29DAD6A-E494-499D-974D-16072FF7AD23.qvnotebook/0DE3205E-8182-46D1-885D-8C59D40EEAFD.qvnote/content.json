{
  "title": "执行上下文",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "b() // call b\nconsole.log(a) // undefined\n\nvar a = 'Hello world'\n\nfunction b() {\n\tconsole.log('call b')\n}\n\n\n//因为函数和变量提升的原因。通常提升的解释是说将声明的代码移动到了顶部，这其实没有什么错误，便于大家理解。但是更准确的解释应该是：在生成执行上下文时，会有两个阶段。第一个阶段是创建的阶段（具体步骤是创建 VO），JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间，函数的话会将整个函数存入内存中，变量只声明并且赋值为 undefined，所以在第二个阶段，也就是代码执行阶段，我们可以直接提前使用。\n\n\n\nvar foo = 1\n(function foo() {\n    foo = 10\n    console.log(foo)\n}()) // -> ƒ foo() { foo = 10 ; console.log(foo) }\n\n\n// 因为当 JS 解释器在遇到非匿名的立即执行函数时，会创建一个辅助的特定对象，然后将函数名称作为这个对象的属性，因此函数内部才可以访问到 foo，但是这个值又是只读的，所以对它的赋值并不生效，所以打印的结果还是这个函数，并且外部的值也没有发生更改。"
    }
  ]
}