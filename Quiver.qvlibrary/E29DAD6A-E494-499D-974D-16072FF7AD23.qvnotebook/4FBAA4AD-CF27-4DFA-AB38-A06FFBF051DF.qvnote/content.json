{
  "title": "事件循环、microTask 、macroTask 、 setTimeout tick",
  "cells": [
    {
      "type": "text",
      "data": "Event loop<div>当函数调用栈为空的时候</div><div>js就会值 task queue 里面拿出队首的时间回调函数执行</div><div><br></div><div><br></div><div>为什么 JS 是单线程&nbsp;</div><div>如果是多线程 同时处理dom 一致性 不能保证 加读写锁 繁琐 不灵活</div><div><br></div><div>js在执行过程中会产生执行环境，这些执行环境会被顺序加入到执行栈中，如果遇到异步代码，就会被挂起并且加入多 Task 队列中， 一旦执行栈为空， EventLoop 就会从 Task 队列中 拿出需要执行的代码放入执行栈里面执行。</div><div><br></div><div><span style=\"color: rgb(44, 62, 80); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为&nbsp;</span><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588); font-variant-ligatures: normal; orphans: 2; widows: 2;\">jobs</code><span style=\"color: rgb(44, 62, 80); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">，macrotask 称为&nbsp;</span><code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588); font-variant-ligatures: normal; orphans: 2; widows: 2;\">task</code><span style=\"color: rgb(44, 62, 80); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">。</span><br></div><div><span style=\"color: rgb(44, 62, 80); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><br></span></div><div><span style=\"color: rgb(44, 62, 80); font-variant-ligatures: normal; orphans: 2; widows: 2;\"><p style=\"font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; line-height: 1.7; color: rgb(44, 62, 80); font-variant-ligatures: normal;\">微任务包括&nbsp;<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">process.nextTick</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">promise</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">Object.observe</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">MutationObserver</code></p><p style=\"font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; line-height: 1.7; color: rgb(44, 62, 80); font-variant-ligatures: normal;\">宏任务包括&nbsp;<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">script</code>&nbsp;，&nbsp;<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">setTimeout</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">setInterval</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">setImmediate</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">I/O</code>&nbsp;，<code style=\"font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: rgb(71, 101, 130); padding: 0.25rem 0.5rem; font-size: 0.85em; background-color: rgba(27, 31, 35, 0.0470588);\">UI rendering</code></p><p style=\"line-height: 1.7; color: rgb(44, 62, 80); font-variant-ligatures: normal;\"><font face=\"source-code-pro, Menlo, Monaco, Consolas, Courier New, monospace\" size=\"2\">一次 event loop 的执行顺序</font></p><ol style=\"font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; font-size: 16px; padding-left: 1.2em; line-height: 1.7; color: rgb(44, 62, 80); font-variant-ligatures: normal;\"><li>执行同步代码，这属于宏任务</li><li>执行栈为空，查询是否有微任务需要执行</li><li>执行所有微任务</li><li>必要的话渲染 UI</li><li>然后开始下一轮 Event loop，执行宏任务中的异步代码</li></ol></span></div>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "code",
      "language": "javascript",
      "data": " setTimeout(function cb() {\n    console.log('this is a msg from call back');\n  });\n\n  console.log('this is just a message');\n\n  setTimeout(function cb1() {\n    console.log('this is a msg from call back1');\n  }, 0);\n\n\n// \"this is just a message'\"\n// \"this is a msg from call back\"  并不能保证进入队列里的顺序\n// \"this is a msg from call back1\""
    }
  ]
}