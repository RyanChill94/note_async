{
  "title": "React_Top_Level_API",
  "cells": [
    {
      "type": "text",
      "data": "1. React.createElement<br>"
    },
    {
      "type": "text",
      "data": "2. React.cloneElement<div><div>克隆jsx 保留ref 不会丢失ref</div></div><div><pre class=\"gatsby-code-jsx\" style=\"margin: 1rem; padding: 0px; box-sizing: inherit; font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 20px; white-space: pre-wrap; word-break: break-word; color: rgb(255, 255, 255); font-variant-ligatures: normal; orphans: 2; widows: 2; height: auto !important;\"><code style=\"box-sizing: inherit; font-family: source-code-pro, Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 1em;\">React<span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">.</span><span class=\"token function\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(121, 182, 242);\">createElement</span><span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">(</span>\n  type<span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">,</span>\n  <span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">[</span>props<span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">]</span><span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">,</span>\n  <span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">[</span><span class=\"token operator\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(215, 222, 234);\">...</span>children<span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">]</span>\n<span class=\"token punctuation\" style=\"margin: 0px; padding: 0px; box-sizing: inherit; color: rgb(95, 179, 179);\">)</span></code></pre></div>"
    },
    {
      "type": "text",
      "data": "3. React.createFactory()<div>&nbsp;如果使用 JSX 一般不会调用</div><div><br></div><div>4. React.isValidElement()</div><div>验证一个对象是否是一个React对象</div><div><br></div><div>5.React.Children</div><div>&nbsp; -forEach map count only(仅有子级 否则报错)</div><div><br></div><div>6.React.Fragment</div><div><br></div><div>7. ForwadRef&nbsp;</div>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "React-DOM<div><br></div><div>1. Render</div><div><br></div><div>2. unmountComponentAtNode(container)</div><div>在dom元素中移除已经挂载的React组件， 清除相应的事件处理器和state 返回值为是否有组件被移除</div><div><br></div><div>只能卸载通过组件render函数渲染的组件</div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "class App extends Component {\n    constructor(props) {\n        super(props)\n    }\n    componentDidMount() {\n        render(<FieldOne />, this.fieldOne)\n    }\n    handleClick() {\n        console.log(unmountComponentAtNode(this.fieldOne))\n        console.log(unmountComponentAtNode(this.fieldTwo))\n    }\n    render() {\n        return (\n            <div className=\"container\">\n                <div>\n                    <button onClick={this.handleClick.bind(this)}>REMOVE COMPONENT</button>\n                </div>\n               <div ref={fieldOne => this.fieldOne = fieldOne}></div>\n               <div ref={fieldTwo => this.fieldTwo = fieldTwo}>\n                    <FieldTwo />\n               </div>\n            </div>\n        )\n    }\n}\n\nrender(<App />, document.getElementById('root'))\n"
    },
    {
      "type": "text",
      "data": "<div><br></div><div><div>3. findDOMNode(component)</div><div>返回已经挂载组件的dom元素</div><div><br></div><div>4. Hydrate()</div><div><br></div><div>5. createPortal()</div><div>ReactDOM.createPortal(child, container)</div></div>"
    },
    {
      "type": "text",
      "data": "<h3 id=\"React-Children\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 20px; margin-bottom: 10px; font-size: 24px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.&nbsp;<code style=\"box-sizing: border-box; font-size: 21.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children</code>类</h3><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children</code>是一个工具类，它提供了对组件不透明数据结构<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">this.props.children</code>的处理功能。</p><h4 id=\"Children-map\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 10px; margin-bottom: 10px; font-size: 18px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.1&nbsp;<code style=\"box-sizing: border-box; font-size: 16.2px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.map</code></h4><pre style=\"box-sizing: border-box; overflow: auto; line-height: 1.42857; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">array React.Children.map(object children, function fn [, object thisArg])</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">在每个直接子元素（<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>）上调用<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">fn</code>函数。如果&nbsp;<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>&nbsp;是一个内嵌的对象或者数组，它将被遍历（不会传入容器对象到<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">fn</code>中）。如果<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>&nbsp;参数是 null 或者 undefined，那么返回 null 或者 undefined 而不是一个空对象。</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"></p><h4 id=\"Children-forEach\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 10px; margin-bottom: 10px; font-size: 18px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.2&nbsp;<code style=\"box-sizing: border-box; font-size: 16.2px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.forEach</code></h4><pre style=\"box-sizing: border-box; overflow: auto; line-height: 1.42857; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">React.Children.forEach(object children, function fn [, object thisArg])</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">与<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.map</code>方法功能类似，但不返回数组。</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"></p><h4 id=\"Children-count\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 10px; margin-bottom: 10px; font-size: 18px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.3&nbsp;<code style=\"box-sizing: border-box; font-size: 16.2px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.count</code></h4><pre style=\"box-sizing: border-box; overflow: auto; line-height: 1.42857; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">number React.Children.count(object children)</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">统计<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>中的子组件数，和传递给<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">map</code>、<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">forEach</code>回调函数的调用次数一致。</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"></p><h4 id=\"Children-only\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 10px; margin-bottom: 10px; font-size: 18px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.4&nbsp;<code style=\"box-sizing: border-box; font-size: 16.2px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.only</code></h4><pre style=\"box-sizing: border-box; overflow: auto; line-height: 1.42857; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">number React.Children.only(object children)</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">返回<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>中仅有的子级。否则抛出异常。</p><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br style=\"box-sizing: border-box;\"></p><h4 id=\"Children-toArray\" style=\"box-sizing: border-box; font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-weight: 400; line-height: 1.1; color: rgb(51, 51, 51); margin-top: 10px; margin-bottom: 10px; font-size: 18px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">3.5&nbsp;<code style=\"box-sizing: border-box; font-size: 16.2px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">React.Children.toArray</code></h4><pre style=\"box-sizing: border-box; overflow: auto; line-height: 1.42857; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 9.5px; margin-top: 0px; margin-bottom: 10px; word-break: break-all; overflow-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2;\">array React.Children.toArray(object children)</pre><p style=\"box-sizing: border-box; margin: 0px 0px 10px; color: rgb(51, 51, 51); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">将不透明的子组件<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">children</code>转换为一个水平的数组。这在你操作子组件集合使用<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">render</code>方法时非常有用，特别是在你想在传递结果前重新排列或分隔<code style=\"box-sizing: border-box; font-size: 12.6px; padding: 2px 4px; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; background-color: rgb(249, 242, 244); white-space: nowrap; border-radius: 4px;\">this.props.children</code>时。</p>"
    }
  ]
}