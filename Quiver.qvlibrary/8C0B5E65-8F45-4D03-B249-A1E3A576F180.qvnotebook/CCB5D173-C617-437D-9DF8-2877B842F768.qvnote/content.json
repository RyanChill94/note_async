{
  "title": "redux-saga",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// noprotect\n//jshint esnext:true, asi:true\n\nconsole.clear()\n\nconst { \n  createStore, \n  combineReducers, \n  applyMiddleware, \n  bindActionCreators \n} = Redux\n\nconst { \n  default: createSagaMiddleware, \n  effects: {take, put, call, fork, join, cancel, race} } = ReduxSaga\n\n\n///////////////////////////////////////////////////////////////////\n//\n// Utils\n//\n\nconst log = v => console.log(v)\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\nconst action = type => (payload={}) => ({type, ...payload})\n\nfunction createRequestTypes(base) {\n  return {\n    REQUEST : `${base}_REQUEST`,\n    SUCCESS : `${base}_SUCCESS`,\n    ERROR   : `${base}_ERROR`\n  }\n}\n\nfunction apify(fn) {\n  return (...args) => \n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        resolve(fn(...args))\n      } catch(e) {\n        reject(e)\n      }    \n    }, 1000)\n  }) \n}\n\n///////////////////////////////////////////////////////////////\n//\n// API\n//\n\nconst users = [\n  {name: 'admin', password: 'admin'},\n  {name: 'guest', password: 'guest'}\n]\n\nlet tokenId = 0\n\nfunction authFn({token, name, password}) {\n  if(token) {\n    return refreshTokenFn(token)\n  }\n  \n  else {\n    const valid = users.some(\n      u => u.name === name && u.password === password\n    )\n    \n    if(valid)\n      return {expires_in: 2000, id: ++tokenId, $$token: true}\n    else\n      throw 'Invalid credentials'\n  }\n  \n}\n\nfunction refreshTokenFn(token) {\n  if(!token.$$token)\n    throw 'Invalid token'\n  return {...token, id: ++tokenId}\n}\n\nconst api = {\n  authorize: apify(authFn),\n  refreshToken: apify(refreshTokenFn)\n}\n\n\n///////////////////////////////////////////////////////////////\n//\n// Actions\n//\n\n\nconst LOGIN = createRequestTypes('LOGIN')\nconst login = {\n  request : (name, password) => action(LOGIN.REQUEST)({name, password}),\n  success : (token) => action(LOGIN.SUCCESS)({token}),\n  error   : (error) => action(LOGIN.ERROR)({error})\n}\n\nconst LOGOUT = 'LOGOUT'\nconst logout = action(LOGOUT)\n\n\n///////////////////////////////////////////////////////////////\n//\n// Reducers\n//\n\n\nconst PENDING = 'PENDING'\nconst IN = 'IN'\nconst OUT = 'OUT'\n\nfunction user(state = null, action) {\n  switch(action.type) {\n    case LOGIN.REQUEST:\n      return {\n        name: action.name, \n        password: action.password,\n        status: PENDING\n      }\n      \n    case LOGIN.SUCCESS:\n      return {\n        ...state, \n        status: IN,\n        token: action.token\n      }\n      \n    case LOGIN.ERROR:\n      return {\n        ...state, \n        status: OUT,\n        token: null,\n        error: action.error\n      }\n      \n    case LOGOUT:\n      return null  \n      \n    default:\n      return state  \n  }\n}\n      \nconst rootReducer = combineReducers({\n  user\n})\n\n///////////////////////////////////////////////////////////////\n//\n// Sagas\n//\n\nfunction* authorize(credentials) {\n  const token = yield call(api.authorize, credentials)\n  yield put( login.success(token) )\n  return token\n}\n\nfunction* authAndRefreshTokenOnExpiry(name, password) {\n  let token = yield call(authorize, {name, password})\n  while(true) {\n    yield call(delay, token.expires_in)\n    token = yield call(authorize, {token})\n  }\n}\n\nfunction* watchAuth() {\n  while(true) {\n    const {name, password} = yield take(LOGIN.REQUEST)      \n\n    yield race([\n      take(LOGOUT),\n      call(authAndRefreshTokenOnExpiry, name, password)\n    ])      \n  }\n}\n\n\n///////////////////////////////////////////////////////////////\n//\n// Create the store. Log states into the console\n//\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n)\nsagaMiddleware.run(watchAuth)\n\n\nlet lastState\nstore.subscribe(() => {\n  const state = store.getState()\n  if(state !== lastState) {\n    lastState = state\n    console.log('user:', lastState.user)\n  }\n})\n      \n/* test */\n\nstore.dispatch(login.request('admin', 'admin'))\n\n\nsetTimeout(() => {\n  store.dispatch(logout())  \n}, 14333)\n"
    }
  ]
}