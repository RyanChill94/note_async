{
  "title": "Redux middleware",
  "cells": [
    {
      "type": "text",
      "data": "1. 数据流图<div>// normal<br><div><img src=\"quiver-image-url/A6084187800594173356386DE0520A46.png\" alt=\"iyMjYnu.png\" width=\"550\" height=\"130\"><br></div></div><div><br></div><div>// with middleware</div><div><img src=\"quiver-image-url/2CDB7903408DE87A81D05CA1693AC395.png\" alt=\"bIBJjeM.png\" width=\"550\" height=\"152\"><br></div>"
    },
    {
      "type": "text",
      "data": "<div>2.applyMiddleware</div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// compose\nexport default function compose(...funcs) {\n  // 没有入参\n  if (funcs.length === 0) {\n    return arg => arg\n  }\n  \n  // 只有一个函数\n  if (funcs.length === 1) {\n    return funcs[0]\n  }\n  \n  //\n  return funcs.reduce((a, b) => (...args) => a(b(...args)))\n  //\n}\n\nimport compose from './compose'\n\nexport default function applyMiddleware(...middlewares) {\n    return (createStore) => (reducer, preloadedState, enhancer) => {\n        var store = createStore(reducer, preloadedState, enhancer)\n        // store 暴露了很多api\n        // e.g. dispatch subscribe getState replaceReducer...\n        // react-redux 就是使用其中的api进行自动监听\n        var dispatch = store.dispatch\n        var chain = []\n\n        var middlewareAPI = {\n            getState: store.getState,\n            dispatch: (action) => dispatch(action)\n        }\n        chain = middlewares.map(middleware => middleware(middlewareAPI))\n        dispatch = compose(...chain)(store.dispatch) // 形成链式调用的dispatch\n        return {\n            ...store,\n            dispatch\n        }\n    }\n}\n\n\n// let newStore = applyMiddleware(mid1, mid2, mid3, ...)(createStore)(reducer, null);\n// curry化\n// middlewares => [mid1,mid2,mid3]\n// createStore => reducer\n// reducer,null => (reducer, preloadedState)\n\n// redux-thunk\nfunction createThunkMiddleware(extraArgument) {\n  return function (_ref) { //接受middleWare API\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === 'function') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\n"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// mock compose\n// mock compose\n\nfunction addOne (num){\n  return num + 1;\n}\n\nfunction addTwo (num){\n  return num + 2;\n}\n\nfunction addThree (num){\n  return num + 3;\n}\n\nfunction EasyCompose(...funcs){\n    return funcs.reduce((a,b) => (...args) => {\n      console.log(\"a =>\",a);\n      console.log(\"b =>\",b);\n      return a(b(...args))\n    }); \n}\n\nvar nssFun = EasyCompose(addOne,addTwo,addThree);\n\nconsole.log(nssFun);\n\nnssFun(1)"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/F056A780BE88205FF6FEE1C1E070896D.jpg\" alt=\"preview\" width=\"1964\" height=\"794\"><br>"
    },
    {
      "type": "text",
      "data": "Redux middle ware的本质相当于对 store.dispatch函数的增强<br><div><div><br></div></div>"
    },
    {
      "type": "text",
      "data": "如果middle 涉及一些可被终止的功能，可以返回相应的处理函数<div><br></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "/**\n * Schedules actions with { meta: { delay: N } } to be delayed by N milliseconds.\n * Makes `dispatch` return a function to cancel the timeout in this case.\n */\nconst timeoutScheduler = store => next => action => {\n  if (!action.meta || !action.meta.delay) {\n    return next(action)\n  }\n\n  const timeoutId = setTimeout(() => next(action), action.meta.delay)\n\n  return function cancel() {\n    clearTimeout(timeoutId)\n  }\n}\n\n\nconst cancel = store.dispatch({type : \"INCREMENT\", meta : {delay : 1000}});\n\n// kill it off\ncancel();\nOr, similarly with a bound action creator in a React component:\n\n// assume we have an action creator like this passed to connect():\nfunction incrementWithDelay() {\n    return {type : \"INCREMENT\", meta : {delay : 1000}};\n}\n\n\nconst cancel = this.props.incrementWithDelay();\ncancel();"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "有用的资料：<a href=\"https://zhuanlan.zhihu.com/p/21391101\">https://zhuanlan.zhihu.com/p/21391101</a>"
    }
  ]
}