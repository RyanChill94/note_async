{
  "title": "react_in_depth",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// 1. 从props 摘取需要的属性\nconst Button = props => {\n  const { kind, ...other } = props;\n  const className = kind === \"primary\" ? \"PrimaryButton\" : \"SecondaryButton\";\n  return <button className={className} {...other} />;\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button kind=\"primary\" onClick={() => console.log(\"clicked!\")}>\n        Hello World!\n      </Button>\n    </div>\n  );\n};\n\n// 2.\nimport React from 'react';\nimport { PhotoStory, VideoStory } from './stories';\n\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\n\nfunction Story(props) {\n  // Wrong! JSX type can't be an expression.\n  return <components[props.storyType] story={props.story} />;\n  \n  // correct \n  const SpecificStory = components[props.storyType];\n  return <SpecificStory story={props.story} />;\n}\n\n// 3.Functions as Children\n// Calls the children callback numTimes to produce a repeated component\nfunction Repeat(props) {\n  let items = [];\n  for (let i = 0; i < props.numTimes; i++) {\n    items.push(props.children(i));\n  }\n  return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n  return (\n    <Repeat numTimes={10}>\n      {(index) => <div key={index}>This is item {index} in the list</div>}\n    </Repeat>\n  );\n}\n\n// 4.controlled component & uncontrolled component\n\n/*\nA Controlled Component is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component \"controls\" it by handling the callback and managing its own state and passing the new values as props to the controlled component. You could also call this a \"dumb component\".\nA Uncontrolled Component is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.\n*/\n\n\n// https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/\n\nrender() {\n  return (\n    <form onSubmit={this.handleSubmit}>\n      <label>\n        Name:\n        <input\n          defaultValue=\"Bob\"  // default val\n          type=\"text\"\n          ref={(input) => this.input = input} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\n// 5.React.PureComponent\n\n/*\nyou can use React.PureComponent instead of writing your own shouldComponentUpdate. \nIt only does a shallow comparison, so you can’t use it if the props or state may have been mutated in a way that a shallow comparison would miss.\n*/\n\nclass ListOfWords extends React.PureComponent {\n  render() {\n    return <div>{this.props.words.join(',')}</div>;\n  }\n}\n\nclass WordAdder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: ['marklar']\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This section is bad style and causes a bug\n    const words = this.state.words;\n    words.push('marklar');\n    this.setState({words: words});\n  }\n  \n  // solve 1\n  handleClick() {\n    this.setState(prevState => ({\n        words: prevState.words.concat(['marklar']) \n        //turns a new object, rather than mutating the old one. \n        // 返回一个新的对象 而不是去改变老的对象   \n        }));\n  }\n  \n  // solve 2 \n  handleClick() {\n    this.setState(prevState => ({\n        words: [...prevState.words, 'marklar'],\n     })); \n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick} />\n        <ListOfWords words={this.state.words} />\n      </div>\n    );\n  }\n}\n\n// 无法正常更新 pureComponent 会进行一次浅比较 simple comparsion -> equal\n// 指向的是同一个地址\n\n// 6.Not Mutating Data\n\n\n\n// 7. portals \n// \nhttps://codepen.io/gaearon/pen/yzMaBd\n\n// These two containers are siblings in the DOM\nconst appRoot = document.getElementById('app-root');\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.el,\n    );\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {clicks: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This will fire when the button in Child is clicked,\n    // updating Parent's state, even though button\n    // is not direct descendant in the DOM.\n    this.setState(prevState => ({\n      clicks: prevState.clicks + 1\n    }));\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        <p>Number of clicks: {this.state.clicks}</p>\n        <p>\n          Open up the browser DevTools\n          to observe that the button\n          is not a child of the div\n          with the onClick handler.\n        </p>\n        <Modal>\n          <Child />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction Child() {\n  // The click event on this button will bubble up to parent,\n  // because there is no 'onClick' attribute defined\n  return (\n    <div className=\"modal\">\n      <button>Click</button>\n    </div>\n  );\n}\n\nReactDOM.render(<Parent />, appRoot);\n\n\n\n// render props tech\nclass Cat extends React.Component {\n  render() {\n    const mouse = this.props.mouse;\n    return (\n      <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n    );\n  }\n}\n\nclass Mouse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100%' }} onMouseMove={this.handleMouseMove}>\n\n        {/*\n          Instead of providing a static representation of what <Mouse> renders,\n          use the `render` prop to dynamically determine what to render.\n        */}\n        {this.props.render(this.state)}   // 不一定是要传递props方法，只要传递一个函数即可\n      </div>\n    );\n  }\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n        \n        <Mouse render={mouse => (    // 将要渲染的组件以fun的方式传递 \n          <Cat mouse={mouse} />\n        )}/>\n        \n        // 或者以这种方式传递\n        <Mouse>\n         {mouse => (\n            <p>The mouse position is {mouse.x}, {mouse.y}</p>\n         )}\n        </Mouse>\n       \n      </div>\n    );\n  }\n}\n\n\n// 可以使用一个HOC进行包裹 新生成的组件继承至这个HOC\n// If you really want a HOC for some reason, you can easily\n// create one using a regular component with a render prop!\nfunction withMouse(Component) {\n  return class extends React.Component {\n    render() {\n      return (\n        <Mouse render={mouse => (\n          <Component {...this.props} mouse={mouse} />\n        )}/>\n      );\n    }\n  }\n}\n\n\n// 如果是pureComponent 会出现问题， 应该将要包裹的组件定义成外部方法\nclass MouseTracker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // This binding ensures that `this.renderTheCat` always refers\n    // to the *same* function when we use it in render.\n    this.renderTheCat = this.renderTheCat.bind(this);\n  }\n\n  // 定义成外部的函数\n  renderTheCat(mouse) {\n    return <Cat mouse={mouse} />;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n        <Mouse render={this.renderTheCat} />\n      </div>\n    );\n  }\n}"
    }
  ]
}