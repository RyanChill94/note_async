{
  "title": "记忆化斐波那契",
  "cells": [
    {
      "type": "text",
      "data": "Q:<div><p style=\"box-sizing: border-box; margin: 0px 0px 10.5px; color: rgb(34, 34, 34); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">斐波那契数列指的是类似于以下的数列：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; padding: 10px; margin-top: 0px; margin-bottom: 20px; line-height: 1.4; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: none; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><code class=\"hljs\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0.5em; color: rgb(68, 68, 68); background-color: rgb(240, 240, 240); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; white-space: pre-wrap; display: block; overflow-x: auto;\">1, 1, 2, 3, 5, 8, 13, ....\n</code></pre><p style=\"box-sizing: border-box; margin: 0px 0px 10.5px; color: rgb(34, 34, 34); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">也就是，第 n 个数由数列的前两个相加而来：f(n) = f(n - 1) + f(n -2)</p><p style=\"box-sizing: border-box; margin: 0px 0px 10.5px; color: rgb(34, 34, 34); font-family: &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">请你完成&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13.5px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 0px;\">fibonacci</code>&nbsp;函数，接受&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13.5px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 0px;\">n</code>&nbsp;作为参数，可以获取数列中第&nbsp;<code style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 13.5px; padding: 2px 4px; color: rgb(199, 37, 78); background-color: rgb(249, 242, 244); border-radius: 0px;\">n</code>&nbsp;个数，例如：</p><pre style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; padding: 10px; margin-top: 0px; margin-bottom: 20px; line-height: 1.4; word-break: break-all; word-wrap: break-word; color: rgb(51, 51, 51); background-color: rgb(245, 245, 245); border: none; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; font-variant-ligatures: normal; orphans: 2; widows: 2;\"><code class=\"language-javascript hljs\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; font-size: inherit; padding: 0.5em; color: rgb(68, 68, 68); background-color: rgb(240, 240, 240); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; white-space: pre-wrap; display: block; overflow-x: auto;\">fibonacci(<span class=\"hljs-number\" style=\"box-sizing: border-box; color: rgb(136, 0, 0);\">1</span>) <span class=\"hljs-comment\" style=\"box-sizing: border-box; color: rgb(136, 136, 136);\">// =&gt; 1</span>\nfibonacci(<span class=\"hljs-number\" style=\"box-sizing: border-box; color: rgb(136, 0, 0);\">2</span>) <span class=\"hljs-comment\" style=\"box-sizing: border-box; color: rgb(136, 136, 136);\">// =&gt; 1</span>\nfibonacci(<span class=\"hljs-number\" style=\"box-sizing: border-box; color: rgb(136, 0, 0);\">3</span>) <span class=\"hljs-comment\" style=\"box-sizing: border-box; color: rgb(136, 136, 136);\">// =&gt; 2</span></code></pre></div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "// 1\n// 递归写法其实并没有时间记忆化\nconst memorizeFibonacci1 = n => {\n    if (n == 1 || n == 2) {\n        return 1;\n    } else {\n        return memorizeFibonacci(n - 1) + memorizeFibonacci(n - 2);\n    }\n}\n\n// 尾递归？\n\n// 2\n// 使用一个闭包来保存变量\nconst memorizeFibonacci2 = ((memory = {}) => n => {\n    if (n < 2) return 1;\n    if (memory[n - 1] === undefined) {\n        memory[n - 1] = memorizeFibonacci(n - 1);\n    }\n    if (memory[n - 2] === undefined) {\n        memory[n - 2] = memorizeFibonacci(n - 2);\n    }\n\n    return memory[n - 1] + memory[n - 2];\n})()\n\n// const memorizeFibonacci = Fibonacci();\n\n// 3\nconst memorizeFibonacci3 = n => {\n    // 将变量作为函数的属性\n    fibonacci.m = fibonacci.m || {};\n    if(fibonacci.m[n]){\n     return fibonacci.m[n];   \n    }\n    if( n === 1 || n === 2 ){\n        fibonacci.m[n] = 1;\n        return 1;\n    }\n    \n    return fibonacci(n-1) + fibonacci(n-2);\n}\n\n\n\n// 4\n// 大神\nconst fibonacci = ((s) => (f = (i) => s[i] || (s[i] = f(i - 1) + f(i - 2))))([0, 1, 1])\n\n\n// 5 Javascript 精髓\nconst fibonacci = ((memo = [0, 1]) => {\n    const fib = (n) => {\n        let result = memo[n]\n        if (typeof result !== 'number') {\n            result = fib(n-1) + fib(n-2)\n            memo[n] = result\n        }\n        return result\n    }\n})()\n\n\n// 6\nconst fibonacci = (n) => {\n    const fib = (prev, next, count) => {\n      if (count === 0) {\n        return prev\n      } else {\n        return fib(next, prev + next, count - 1)\n      }\n    }\n    return fib(0, 1, n)\n  }\n\n// 7 \n// 先使用大变量打表\n\nconst fibonacci = (n) => {\n    if (!fibonacci.cache) {\n        fibonacci.cache = [];\n        for (let i = 1; i <= 1000000; i++) {\n            if (i === 1 || i === 2) {\n                fibonacci.cache[i] = 1;\n            }\n            else if (i > 2) {\n                fibonacci.cache[i] = fibonacci.cache[i - 1] + fibonacci.cache[i - 2];\n            }\n        }\n    }\n\n    return fibonacci.cache[n];\n}\n\n\n// map\n// 1 1 2 3 5 8 13 21 34\n\n\n// test\nconsole.log(\"1=>\", fibonacci(1))\nconsole.log(\"2=>\", fibonacci(2))\nconsole.log(\"5=>\", fibonacci(5))"
    }
  ]
}