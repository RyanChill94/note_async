{
  "title": "Webpack.prod.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "const webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin'); // V4 ExtractTextPlugin 替换方案\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst ManifestPlugin = require('webpack-manifest-plugin'); // 作用？\nconst InlineManifestWebpackPlugin = require('inline-manifest-webpack-plugin'); // 将 webpack 的 runtime 文件内联进html 减少一次请求\nconst HtmlWebpackInjectAttributesPlugin = require('html-webpack-inject-attributes-plugin');\nconst path = require('./path-variables');\n\nconst args = process.argv;\nconst ENTRY_PATH = `${path.STATIC_PATH}/js/homepage/main.js`;\nconst TEMPLATE_PATH = `${path.SRC_PATH}/views/page/index.html`;\n\nconst online = args.indexOf('--deploy=online') > -1;\n\n// 测试环境静态资源 domain\nconst TEST_PUBLIC_PATH = '/';\n\n// 生产环境静态资源 domain\nconst ONLINE_PUBLIC_PATH = '//static.360buyimg.com/bid/msz/';\n\nconst commonTemplateConf = {\n    template: TEMPLATE_PATH, // 模板文件\n    inject: true,\n    attributes: {\n        crossOrigin: 'anonymous'\n    },\n    minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n        // more options:\n        // https://github.com/kangax/html-minifier#options-quick-reference\n    },\n    chunksSortMode: 'dependency'\n};\n\nmodule.exports = {\n    mode: 'production',\n    devtool: online ? 'none' : 'source-map',\n    entry: {\n        app: [ENTRY_PATH]\n    },\n    output: {\n        filename: 'static/js/[name].[contenthash:10].bundle.js',\n        chunkFilename: 'static/js/[name].[contenthash:10].bundle.js',\n        publicPath: online ? ONLINE_PUBLIC_PATH : TEST_PUBLIC_PATH\n    },\n    plugins: [\n        new CleanWebpackPlugin('./build/*', {\n            root: path.ROOT_PATH,\n            verbose: true,\n            dry: false\n        }),\n        new HtmlWebpackPlugin({\n            ...{\n                title: '商智移动版',\n                filename: './views/index.html' // 生成文件名\n            },\n            ...commonTemplateConf\n        }),\n        new HtmlWebpackPlugin({\n            ...{\n                title: '商智移动版-运营版登录',\n                filename: './views/templogin.html'\n            },\n            ...commonTemplateConf\n        }),\n        new HtmlWebpackPlugin({\n            ...{\n                title: '商智移动版-无权限',\n                filename: './views/noauth.html'\n            },\n            ...commonTemplateConf\n        }),\n        new InlineManifestWebpackPlugin('runtime'),\n        new MiniCssExtractPlugin({\n            filename: 'static/css/[name].[contenthash].css\"',\n            chunkFilename: 'static/css/[name].[contenthash].css'\n        }),\n        new ManifestPlugin(),\n        // keep module stable if modules does not change\n        // 原因：chunk 内容和 hash 变化不一致的 在公共代码 Vendor 内容不变的情况下，添加 entry，或者 external 依赖，或者异步模块的时候，Vendor 的 hash 会改变。\n        new webpack.HashedModuleIdsPlugin(),\n        new HtmlWebpackInjectAttributesPlugin()\n    ],\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                exclude: /\\.min\\.js$/,\n                cache: true,\n                parallel: true,\n                sourceMap: !online,\n                extractComments: false, // 移除注释\n                uglifyOptions: {\n                    compress: {\n                        unused: true,\n                        warnings: false,\n                        drop_debugger: true\n                    },\n                    output: {\n                        comments: false\n                    }\n                }\n            }),\n            new OptimizeCSSAssetsPlugin({\n                assetNameRegExp: /\\.css$/g,\n                cssProcessorOptions: {\n                    safe: true,\n                    autoprefixer: { disable: true }, // 避免autoprefixer的前缀被移除\n                    discardComments: {\n                        removeAll: true // 移除注释\n                    }\n                },\n                canPrint: true\n            })\n        ]\n    }\n};\n"
    }
  ]
}