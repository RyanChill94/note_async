{
  "title": "Webpack.base.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "const os = require('os');\nconst webpack = require('webpack');\nconst HappyPack = require('happypack'); // NOTE: webapck 4 已经是多线程工作 有没有必要添加happypack？\nconst path = require('./path-variables');\nconst autoprefixer = require('autoprefixer');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin'); // V4 ExtractTextPlugin 替换方案\nconst ServiceWorkerWebpackPlugin = require('serviceworker-webpack-plugin');\nconst args = process.argv;\n\n// 环境变量\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// 是否是线上版本\nconst online = args.indexOf('--deploy=online') > -1;\n\n// 根据系统的内核\b数量指定\b线程池个数\nconst happyThreadPool = HappyPack.ThreadPool({ size: os.cpus().length });\n\nmodule.exports = {\n    output: {\n        path: path.DIST_PATH,\n        publicPath: '/'\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                loader: 'happypack/loader?id=babel', // 启用默认缓存目录\n                exclude: /node_modules/,\n                include: [`${path.STATIC_PATH}/js`, `${path.STATIC_PATH}/sw.js`]\n            },\n            {\n                test: /\\.(css|scss)$/,\n                use: [\n                    isProduction\n                        ? MiniCssExtractPlugin.loader\n                        : { loader: 'style-loader', options: { insertAt: 'bottom' } },\n                    { loader: 'css-loader', options: { minimize: isProduction } },\n                    { loader: 'sass-loader' },\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            parser: 'postcss-scss',\n                            plugins: [\n                                autoprefixer({\n                                    browsers: ['Android >= 7.0', 'ios >= 8']\n                                })\n                            ]\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.(png|jpe?g|gif|ico|svg)$/i,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            fallback: 'file-loader',\n                            limit: 20480, // 20kb\n                            name: `static/img/[name]${isProduction ? '-[hash:10]' : ''}.[ext]`\n                        }\n                    },\n                    {\n                        loader: 'image-webpack-loader',\n                        options: {\n                            disable: true // webpack@2.x and newer\n                        }\n                    }\n                ],\n                include: [`${path.STATIC_PATH}/img`]\n            },\n            {\n                test: /\\.(woff|eot|ttf|svg)(\\?(\\w|#)+)?$/,\n                use: [\n                    {\n                        loader: 'file-loader',\n                        options: {\n                            name: 'static/css/fonts/[name].[ext]'\n                        }\n                    }\n                ],\n                include: [`${path.STATIC_PATH}/css/fonts`]\n            }\n        ]\n    },\n    resolve: {\n        extensions: ['.js', '.jsx'],\n        mainFields: ['jsnext:main', 'browser', 'main'], // 优先采用的第三方模块的语法\n        alias: {\n            css: `${path.STATIC_PATH}/css`,\n            util: `${path.STATIC_PATH}/js/util/main.js`,\n            widget: `${path.STATIC_PATH}/js/widget`,\n            commonComponents: `${path.STATIC_PATH}/js/commonComponents`\n        }\n        // modules: [`${path.STATIC_PATH}/js`, 'node_modules'] 基本没影响\n    },\n    plugins: [\n        new webpack.DefinePlugin({\n            VERSION: JSON.stringify(new Date().toLocaleString().substring(0, 10)),\n            ONLINE: JSON.stringify(online)\n        }),\n        new HappyPack({\n            id: 'babel',\n            loaders: ['babel-loader?cacheDirectory'],\n            threadPool: happyThreadPool,\n            verbose: false\n        }),\n        new ServiceWorkerWebpackPlugin({\n            entry: `${path.STATIC_PATH}/sw.js`\n        })\n    ],\n    optimization: {\n        // 只有 prod mode 会开启？\n        splitChunks: {\n            chunks: 'all', // 必须三选一： \"initial\" | \"all\"(默认就是all) | \"async\"\n            minSize: 30000, // 最小尺寸，默认30000\n            minChunks: 2, // 最小 chunk ，默认1\n            maxAsyncRequests: 5, // 最大异步请求数， 默认5\n            maxInitialRequests: 3, // 最大初始化请求书，默认3\n            name: 'commons',\n            cacheGroups: {\n                vendors: {\n                    test: /[\\\\/]node_modules[\\\\/]/,\n                    name: 'vendors',\n                    chunks: 'initial'\n                }\n            }\n        },\n        runtimeChunk: {\n            name: 'runtime'\n        }\n    }\n};\n"
    }
  ]
}