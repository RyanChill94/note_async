{
  "title": "msz.md",
  "cells": [
    {
      "type": "markdown",
      "data": "#### 1.package.json\n\n - 无用模块\n\n - 基于webpack3.0\n    - 迁移webpack4.x \n    - 打包速度\n    - code spliting\n  \n - 单元测试\n\n - 错误打包方式\n    - 多余输入文件\n    - 多余的样式文件\n\n#### 2.React-router 4.0\n  - [monorepo](https://github.com/pigcan/blog/issues/3)\n    - 相对于multirepo\n    - 优缺点 pros Cons\n    - [Why is Babel a monorepo](https://github.com/babel/babel/blob/master/doc/design/monorepo.md)\n  - 只需要引入 react-router-dom 多了<link> <BrswerRouter>等dom类组件 99.9%情况下只需要引入这个包\n  - react-router-redux【一款同步redux状态的库】 没有引入但是为什么可以成功\n  - 组件\n    - `<BrowserRouter>`\n    - `<Route>`\n      - methods [component render children] \n      - children 的作用是？不仅只是匹配页面 可以做一些相应的操作\n      - props 所有的method 都会被传入这些props {match,location,history}\n      - exact 如果为 true，path 为 '/one' 的路由将不能匹配 '/one/two'，反之，亦然。\n      - strict 对路径末尾斜杠的匹配。如果为 true。path 为 '/one/' 将不能匹配 '/one' 但可以匹配 '/one/two'。\n      - code **URLSearchParams** \n        ```js\n          <Route path=\"/another/:a(\\d{4}-\\d{2}-\\d{2}):b(\\.[a-z]+)\" render={({ match }) => (\n            <h1>\n              paramA: {match.params.a}<br/>\n              paramB: {match.params.b}\n            </h1>\n          )} />\n          \n         <Route path='/query/user' render={({match, location}) => (\n            <div>\n              <p>query</p>\n              <p>match:{JSON.stringify(match)}</p>\n              <p>location:{JSON.stringify(location)}</p>\n              <p>id:{new URLSearchParams(location.search).get('id')}</p>\n              <p>name:{new URLSearchParams(location.search).get('name')}</p>\n            </div>\n          )} />\n        ```\n    - `<Link>` 为应用声明式 无障碍导航\n      - to\n      - replace\n    - `<NavLink>`\n      - activeClassName\n      - activeStyle\n    - `<Swith>` 只渲染第一个匹配的组件\n      - 如果不使用的会造成多次匹配【/about -> 全部组件都渲染】\n        ```js\n        <Route path=\"/about\" component={About}/>\n        <Route path=\"/:user\" component={User}/>\n        <Route component={NoMatch}/>\n        ```\n    - `<Redirect>`\n      - to \n      - push\n      - from\n      - `<Redirect>` 元素使用它们的 from 属性匹配。如果没有对应的 path 或 from，那么它们将匹配任何当前访问地址。\n      - 重定向同时可以觉得是否携带参数[demo](https://codepen.io/minooo/pen/wJNbKQ?editors=0010)\n    - `<Promote>`\n      - message [string| func]\n        ```js\n        <Prompt  \n          when={this.state.dirty} \n          message={location => (`Are you sue you want to go to ${location.pathname}?` \n        )} />\n        ```\n  - 对象和方法\n    - history\n      - \"browser history\" - history 在 DOM 上的实现，用于支持 HTML5 history API 的浏览器\n      - \"hash history\" - history 在 DOM 上的实现，用于旧版浏览器。\n      - \"memory history\" - history 在内存上的实现，用于测试或非 DOM 环境（例如 React Native）。\n      \n      - history 对象是可变的，因为建议从 <Route> 的 prop 里来获取 location，而不是从 history.location 直接获取\n      \n    - location \n      - location 是指你当前的位置，将要去的位置，或是之前所在的位置\n      - location 对象不会发生改变，因此可以在生命周期的回调函数中使用 location 对象来查看\n      - 获取方式\n        - 在 Route component 中，以 this.props.location 获取\n        - 在 Route render 中，以 ({location}) => () 方式获取\n        - 在 Route children 中，以 ({location}) => () 方式获取\n        - 在 withRouter 中，以 this.props.location 的方式获取\n    - match\n      - match 对象包含了 <Route path> 如何与 URL 匹配的信息\n      - 属性\n        - params: object 路径参数，通过解析 URL 中的动态部分获得键值对\n        - isExact: bool 为 true 时，整个 URL 都需要匹配\n        - path: string 用来匹配的路径模式，用于创建嵌套的 <Route>\n        - url: string URL 匹配的部分，用于嵌套的 <Link>\n\n#### 3.code spliting\n  - require.ensure 是否已经落后  import().then()\n  - 生成mainfest的方式？\n  \n#### 4.service worker 完全无法正常工作\n\n\n#### 5.uglyify 有优化空间\n\n#### 6.noparse alias缩短搜索路径\n\n#### 7. dns prefetch\n\n#### 8.Scope Hoisting/Tree shaking\n  - mainFields:['jsnext:main','broswer','main']\n  \n### 9. webpack 2.0 --> 3.0/4.0 升级？\n\n#### 10.ajax 这种鉴权方式并不靠谱\n  新版其实并没做\n\n#### 11. 痛点 \n  - 1. 复杂数据的比较问题\n  - 2. render\n\n\n#### base64 内敛方式\n```css\n// 使用%占位\n%carat-triangle--up {\nbackground-image:url(data:image/png;base64....);\n}\n\n\n.error-message {\n  // code for error message\n  &:before { \n  @extend %carat-triangle--up\n  // code for included this icon\n  }\n}\n```\n\n#### ios 滚动的失效问题\n\n\n#### msz 疑问点\n1.京麦app的title设置方式\n\n2.组件\n  - mszChart \n    - hidelineCode\n    - hideHtml?\n    - 多店分析\n  - mszAbnormal\n    - isPlus ?\n    - \n    \n3. 其他 \n  this.setState的回调函数\n    "
    }
  ]
}