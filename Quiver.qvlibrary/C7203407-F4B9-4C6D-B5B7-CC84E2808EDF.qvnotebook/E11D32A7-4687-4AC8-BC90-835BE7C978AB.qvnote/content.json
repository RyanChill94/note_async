{
  "title": "webpack.config.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "const path = require('path');\nconst fs = require('fs');\n\nconst webpack = require('webpack');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n// let FaviconsWebpackPlugin = require('favicons-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst LodashModuleReplacementPlugin = require('lodash-webpack-plugin');\nconst autoprefixer = require('autoprefixer');\nconst atImport = require('postcss-import');\n\nconst isProduction = process.env.NODE_ENV === 'production'; // 是否是发布版\n\nconst entries = {\n    libs: ['babel-polyfill', 'raf/polyfill', 'dom4', 'react', 'react-dom', 'redux', 'react-redux', 'redux-thunk', 'prop-types', 'axios']\n};\n\n// 组装插件\nfunction getPlugins() {\n    const plugins = [\n        new CleanWebpackPlugin('./build_next/*', {\n            root: path.resolve(__dirname, '../'),\n            verbose: true,\n            dry: false\n        }),\n        new CopyWebpackPlugin([\n            {\n                from: path.resolve(__dirname, '../src_next/static/img/favicon.ico'),\n                to: path.resolve(__dirname, '../build_next/sz/static/img/favicon.ico')\n            }\n        ]),\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'libs'\n        }),\n        new webpack.optimize.CommonsChunkPlugin({\n            name: 'manifest'\n        })\n        // new FaviconsWebpackPlugin('favicon.ico')\n    ];\n    // 处理html\n    /* 过滤掉fragment文件夹 */\n    fs.readdirSync('src_next/views/')\n        .filter(m => m !== 'fragment')\n        .forEach(moduleName => {\n            if (!fs.statSync(`src_next/views/${moduleName}`).isDirectory()) return;\n\n            // 每个module内还有若干页面\n            fs.readdirSync(`src_next/views/${moduleName}`).forEach(page => {\n                // 排除系统文件等\n                const excludeFile = ['.DS_Store'];\n                if (excludeFile.includes(page)) return;\n\n                // 探查对应的js是否存在\n                const chunk = `${moduleName}/${page.replace('.html', '')}/main`;\n                const isE = fs.existsSync(`src_next/static/js/${moduleName}/${page.replace('.html', '')}/main.jsx`);\n                if (isE) {\n                    entries[chunk] = path.resolve(__dirname, `../src_next/static/js/${moduleName}/${page.replace('.html', '')}/main.jsx`);\n                }\n                plugins.push(\n                    new HtmlWebpackPlugin({\n                        // 模板为同级目录下的index.html，为何不用写路径，是因为默认上下文问webpack.config.js所在的文件夹\n                        template: `src_next/views/${moduleName}/${page}/`,\n                        // 自动生成HTML文件的名字,可以嵌套文件夹\n                        filename: `views/${moduleName}/${page}`,\n                        chunks: ['manifest', 'libs'].concat(isE ? [chunk] : [])\n                        // chunksSortMode:'manual'\n                    })\n                );\n            });\n        });\n    plugins.push(\n        new ExtractTextPlugin({\n            filename: `sz/static/style/[name]${isProduction ? '-[contenthash:10]' : ''}.css`,\n            allChunks: true\n        })\n    );\n    isProduction &&\n        plugins.push(\n            new webpack.DefinePlugin({\n                'process.env.NODE_ENV': JSON.stringify('production')\n            }),\n            new webpack.optimize.UglifyJsPlugin({\n                compress: {\n                    drop_console: true,\n                    warnings: false,\n                    collapse_vars: true,\n                    reduce_vars: true\n                },\n                output: {\n                    comments: false,\n                    beautify: false\n                },\n                sourceMap: true\n            }),\n            new LodashModuleReplacementPlugin({\n                shorthands: true,\n                cloning: true,\n                collections: true,\n                chaining: true,\n                flattening: true,\n                paths: true\n            })\n        );\n    return plugins;\n}\n\nconst config = {\n    entry: entries,\n    devtool: isProduction ? 'hidden-source-map' : '#eval', // 生成map文件，但是js不引用\n    output: {\n        path: path.resolve(__dirname, '../build_next'),\n        filename: `sz/static/js/[name]${isProduction ? '-[chunkhash:10]' : ''}.js`,\n        // 用于设定css中引用img的路径\n        publicPath: '/'\n    },\n    plugins: getPlugins(),\n    module: {\n        // loaders加载器\n        loaders: [\n            // loader\n            {\n                test: /\\.s?css$/,\n                use: ['css-hot-loader'].concat(\n                    ExtractTextPlugin.extract({\n                        fallback: 'style-loader',\n                        use: [\n                            { loader: 'css-loader', options: { minimize: true } },\n                            'resolve-url-loader', // 解决由scss文件@import进来的其他scss文件中url()相对路径不正确问题\n                            'sass-loader?sourceMap',\n                            {\n                                loader: 'postcss-loader',\n                                options: {\n                                    parser: 'postcss-scss',\n                                    sourceMap: true,\n                                    plugins: [\n                                        atImport(),\n                                        autoprefixer({\n                                            browsers: ['> 1%', 'cover 99.9%', 'since 2010']\n                                        })\n                                    ]\n                                }\n                            }\n                        ]\n                    })\n                )\n            },\n            {\n                test: /\\.(js|jsx)$/, // 一个匹配loaders所处理的文件的拓展名的正则表达式，这里用来匹配js和jsx文件（必须）\n                exclude: /node_modules/, // 屏蔽不需要处理的文件（文件夹）（可选）\n                use: [\n                    {\n                        loader: 'babel-loader',\n                        options: {\n                            retainLines: true,\n                            cacheDirectory: true\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.(png|jpg|gif|svg|ico)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 8192,\n                            name: `sz/static/img/[name]${isProduction ? '-[hash:10]' : ''}.[ext]`\n                        }\n                    }\n                ]\n            },\n            {\n                test: /\\.(eot|ttf|woff|woff2)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 8192,\n                            name: `sz/static/fonts/[name]${isProduction ? '-[hash:10]' : ''}.[ext]`\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    resolve: {\n        extensions: ['.js', '.jsx', '.json', '.scss', '.css'],\n        alias: {\n            config: path.resolve(__dirname, '../src_next/static/js/config/'),\n            util: path.resolve(__dirname, '../src_next/static/js/util/'),\n            style: path.resolve(__dirname, '../src_next/static/style/'),\n            static: path.resolve(__dirname, '../src_next/static/'),\n            image: path.resolve(__dirname, '../src_next/static/img/'),\n            grace: path.resolve(__dirname, '../node_modules/@jd/react-grace/dist/')\n        }\n    }\n};\n\nmodule.exports = config;\n"
    }
  ]
}