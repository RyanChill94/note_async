{
  "title": "curry.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// curry化 优点\n// 1. 易串连 延迟执行 积累参数\n\n\nfunction add(a,b){\n    return a + b;\n}\n\ncurried = curry(add);\n\ncurried(1)(2) // 3\n\nfunction curry(fn){\n    return innerCurry([]);\n    \n    // 如果传入的参数大于或者等于函数需要的数量 直接调用函数\n    // 如果参数不够就依次保存\n    \n    // 出现的问题！\n    // 记得 return\n    // apply -> 数组 call ->参数列表\n    // 最终的返回值必需是一个 function\n    /*\n       function innerCurry(argv){\n        if(argv.length >= fn.length){\n            fn.call(null,argv);\n        }else{\n            console.log(arguments)\n            innerCurry(argv.concat([].slice.call(arguments)));\n        }\n    }       \n    */\n \n    function innerCurry(argv){\n        if(argv.length >= fn.length){\n            return fn.apply(null,argv);\n        }else{\n            console.log(arguments)\n            return function(){\n                return innerCurry(argv.concat([].slice.call(arguments)));\n            }\n        }\n    }\n}"
    }
  ]
}