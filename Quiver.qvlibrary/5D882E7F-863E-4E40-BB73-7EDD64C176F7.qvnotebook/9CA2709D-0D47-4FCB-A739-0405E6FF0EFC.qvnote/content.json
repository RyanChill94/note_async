{
  "title": "debounce_and_throttle.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// [].slice.call(arguments) 是如何工作的\n// call apply bind 之类的都是 该函数调用时候的this指向!\n// call 是参数列表 apply 是数组\n// arguments 对象通常长这样\n// 是一个类数组\nvar arguments = {\n    0 : 'a',\n    1 : 'b'\n}\n\n\n// 只有当回调函数在 delay 时间不在触发才真正执行回调函数\n// 当scroller 停止的时候的 记录鼠标位置 什么时候算真正停止 比如1000ms 之内不在发生滚动\nfunction debounce(fn,ms){\n    var timeout;\n    return function(){\n        var ctx = this; // ctx standfor 'content'\n        var argv = [].slice.call(arguments);\n        clearTimeout(timeout);\n        timeout = setTimeout(function(){\n            fn.apply(ctx,argv);\n        }),ms)\n    }\n}\n\n// 如果两次调用之间没有达到合适的间隔就放弃执行这个函数\n// 确保函数不会再规定的时间内被多次执行\nfunction throttle(fn,ms){\n    var lastCalled,\n        timeout,\n        ctx,\n        argv;\n    return function(){\n        \n        if(!lastCalled || (new Date() - lastCalled > ms && !timeout)){\n            lastCalled = new Date();\n            return fn.call(this,arguments);\n        }else{\n            ctx = this;\n            argv = [].slice.call(arguments);\n            \n            // 上一次函数还没执行\n            if(!timeout){\n                timeout = setTimeout(function(){\n                    lastcalled = new Date();\n                    fn.apply(ctx,argv)\n                    timeout = null; // 已经执行则清空标志\n                },ms)\n            }\n        }\n    }\n}\n\n//demo：\nvar colors = [\n  'blue',\n  'white',\n  'red',\n  'green',\n  'brown',\n  'purple'\n];\n\nvar colorIndex = 0;\n\nwindow.addEventListener('scroll', throttle(callback, 1000));\n\nfunction throttle(fn, wait) {\n  var time = Date.now();\n  return function() {\n    if ((time + wait - Date.now()) < 0) {\n      fn();\n      time = Date.now();\n    }\n  }\n}\n\nfunction callback() {\n  var target = document.getElementById('target');\n  \n  target.textContent += ' .';\n  target.style.backgroundColor = colors[colorIndex];\n  \n  if (colorIndex === colors.length) {\n    colorIndex = 0;\n  } else {\n    colorIndex++;\n  }\n}"
    }
  ]
}