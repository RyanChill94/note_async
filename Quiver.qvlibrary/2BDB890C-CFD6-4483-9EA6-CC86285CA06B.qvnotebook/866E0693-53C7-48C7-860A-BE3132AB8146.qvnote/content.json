{
  "title": "JavaScript 模块化",
  "cells": [
    {
      "type": "markdown",
      "data": "###1.无模块化\n  \n###2.commonJS 规范\n  - 同步\n  - node.js 保存在硬盘 可以很方便的同步请求\n  - 不适用于前端 文件都异步请求回来的\n  - webpack 原生支持commonjs 规范\n  - commonJs1 vs commonjs2\n    - module.exports 和 exports 其实指向的是同一个对象\n    - 尽量使用 exports 即可\n    - exports 只是 module.exports 的一个别名\n    -  CommonJS1 只能通过 exports.XX = XX 的方式导出，CommonJS2 在 CommonJS1 的基础上加入了 module.exports = XX 的导出方式。 CommonJS 通常指 CommonJS2。\n\n###3.AMD 规范\n  - require.js\n    > API require([module],cb)  define(id,[depends],cb)\n      通过defined来定义一个模块 require来加载\n\n###4.CMD 规范\n  - sea.js 玉伯\n  - 按需加载\n  ```js\n  \n  // AMD\n  define(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好  \n     a.doSomething()    \n     // 此处略去 100 行    \n     b.doSomething()    \n     ...\n  });\n  \n  // CMD\n  define(function(require, exports, module) {\n     var a = require('./a')   \n     a.doSomething()   \n     // 此处略去 100 行   \n     var b = require('./b') \n     // 依赖可以就近书写   \n     b.doSomething()\n     // ... \n  });\n  ```\n\n###5.ES6\n  - import \n  - export\n  \n⚠️ \n1. es6 的 export  / commonJS 的1 module.exports | exports\n\n\n存疑\nesmodule？  --> ES6\nsystemJS？"
    }
  ]
}