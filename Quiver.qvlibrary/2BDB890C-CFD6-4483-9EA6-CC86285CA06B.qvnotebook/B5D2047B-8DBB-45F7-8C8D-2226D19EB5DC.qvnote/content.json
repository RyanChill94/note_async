{
  "title": "Webpack",
  "cells": [
    {
      "type": "text",
      "data": "1. 4x 版本中 webpack 命令行功能被单独移除到 webapck-cli 包中<div><br></div><div style=\"orphans: 2; widows: 2;\">2. webpack 4 中引入 development production none 三种模式 如在打包的时候回出现warning 同时默认值是production</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">3 3.x node_modules/.bin/webpack app/main.js public/bundle.js&nbsp;</div><div style=\"orphans: 2; widows: 2;\">&nbsp; 4.x webpack-cli app/main.js -o public/bundle.js &nbsp;</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">4. Webpack-dev-server 新版 3.1.4 并不兼容 &nbsp;webpack3.x</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">5. 修改完 webpack.config.js 需要重启</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">6. Webapck4.x 约定如果没有指定入口文件 则为 src/index.js 出口地址为 build/main.js</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">7. 4.x 版本移除了commonChunkPlugin &nbsp;webpack-html-plugins 需要更新 fork分支</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">8. Cross-env package 解决 不同bash 类Unix Windows 设置环境变量不一致的问题</div><div style=\"orphans: 2; widows: 2;\">&nbsp; &nbsp;Usage: ’cross-env NODE_ENV=production ‘</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">9. dll 动态链接库&nbsp;</div><div style=\"orphans: 2; widows: 2;\">&nbsp; &nbsp; 第三方文件基本不改动 将包含的库做一个索引 写进mainifest 文件中</div><div style=\"orphans: 2; widows: 2;\">&nbsp; &nbsp; 打包dll文件的时候 只要读取这个mainifest</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">10. devServer 会把构建的文件保存在内存中 &nbsp;DevServer不会理会 webpack.config.json 中的 output.path属性</div><div style=\"orphans: 2; widows: 2;\">&nbsp; &nbsp; [<a href=\"http://local.msz.jd.com:8080/webpack-dev-server\">http://local.msz.jd.com:8080/webpack-dev-server</a>]</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">11. devServer 的 inline属性 &nbsp;是否注入代理客户端到页面的chunk里面 &nbsp;false-&gt; iframe</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">12. Hmr -&gt; hot module replacement 之后会是什么效果</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">13. webpack 中的路径详解【<a href=\"http://www.qinshenxue.com/article/20170315092242.html\">http://www.qinshenxue.com/article/20170315092242.html</a>】</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">14.&nbsp;<span style=\"color: rgb(51, 51, 51); font-family: &quot;Roboto Mono&quot;, Monaco, courier, monospace; white-space: pre; background-color: rgb(248, 248, 248);\">静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</span></div><div style=\"orphans: 2; widows: 2;\"><span style=\"color: rgb(51, 51, 51); font-family: &quot;Roboto Mono&quot;, Monaco, courier, monospace; white-space: pre; background-color: rgb(248, 248, 248);\"><br></span></div><div style=\"orphans: 2; widows: 2;\"><span style=\"color: rgb(51, 51, 51); font-family: &quot;Roboto Mono&quot;, Monaco, courier, monospace; white-space: pre; background-color: rgb(248, 248, 248);\">15. </span><font face=\"Roboto Mono, Monaco, courier, monospace\"><span style=\"white-space: pre;\">Externals 告诉webpack 已经内置了哪些模块 在代码中宠幸import不会被重复打包</span></font></div>"
    },
    {
      "type": "text",
      "data": "<div>Q<br></div><div>1. webpack 怎么自动找到配置文件 webpack.config.js ？</div><div><br></div><div>2. Webpack-dev-server 的 ContentBase 到底是什么鬼</div><div>&nbsp; &nbsp;- 配置devServer HTTP 服务器的文件的根目录 默认是当前的执行目录</div><div>&nbsp; &nbsp;- DevServer 通过Http服务暴露的文件分为两种 1. 本地文件 2.webpack构建结果</div><div>&nbsp; &nbsp;- ContentBase 只是用来配置本地文件的暴露规则</div><div><br></div><div>3. Esm modules?</div><div><br></div>"
    },
    {
      "type": "text",
      "data": "<div><br></div><div><br></div><div>Webpack 4.x ChangeLog</div><div><br></div><div>修改</div><div>* 用法</div><div>&nbsp; 必须要指定mode</div><div>* 语法</div><div>&nbsp; 可以使用 import() 函数 动态引入模块</div><div>* 配置</div><div>&nbsp; 移除 NoEmitErrorsPlugin &nbsp;移动至 optimization.noEmitOnErrors &nbsp;[prod 模式默认启用]</div><div>&nbsp; 移除 ModuleConcatenationPlugin &nbsp;移动至 optimization.concatenateModules [prod 模式默认启用]</div><div>&nbsp; 移除 NameModulesPlugin 移动至optimization.nameModules [prod 模式默认启用]</div><div>* json<div>&nbsp; 可以直接引入JSON 而不使用loader</div></div><div><br></div><div>新特性</div><div>* 模块</div><div>&nbsp; 支持多种模块</div><div>&nbsp; webAssembly</div><div>&nbsp; esm .mjs 模块</div><div>* 优化</div><div>&nbsp; sideEffect false?</div><div>&nbsp; jsonp func -&gt; jsonp array</div><div>&nbsp; optimization.splitChunk</div><div>&nbsp; dead brandch &nbsp;以前只有uglify的时候会移除deadCode 现在webpack回在某些情况下移除deadCODE</div><div>* 语法</div><div>&nbsp; webpackInclude webpackExclude 通过mmagic comment ? 支持import()&nbsp;</div><div>&nbsp; System.import() 会报一个warning</div><div>&nbsp; Resolving 通过 module.rules[].resolve</div><div>&nbsp; Minimize prod mode 自动打开</div><div>&nbsp; Minimizer 可配置</div><div>* 用法</div><div>&nbsp; 一些plugin 的配置可以验证</div><div>&nbsp; Webpack-cli</div><div>&nbsp; progressPlugin —progress 编译进度</div><div>* 性能</div><div>&nbsp;&nbsp;</div>"
    },
    {
      "type": "text",
      "data": "<div><br></div>"
    },
    {
      "type": "text",
      "data": "<br>"
    }
  ]
}