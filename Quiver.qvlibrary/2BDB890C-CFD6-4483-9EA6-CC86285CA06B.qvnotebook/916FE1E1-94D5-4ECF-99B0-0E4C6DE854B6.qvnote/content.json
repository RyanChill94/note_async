{
  "title": "BranchChart",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "/**\n * Created by Ryanchill on 2018/5/7.\n */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport 'css/industry/competitorAnalysis.scss';\nimport BranchChart from './app.js';\nimport './app.scss'\n\nconst config = {\n    chart: {\n        height: 480,\n        branchNum: 5,\n        direction: 'left',\n        color: '#deeafc',\n        pointColor: '#b9cff5'\n    },\n    data: {\n        left: [{\n            name: 'abnc',\n            sku: '12312412',\n        }, {\n            name: 'atnc',\n            sku: '21512412',\n        }],\n        main: [],\n        right: []\n    }\n}\n\n// 自定义函数\nconst cellContentFormatFn = (pos,cell) => {\n    return (\n        <div className='branchChart-cell'>\n            <img src={cell.imgSrc} alt='' />\n            <p> {cell.name}</p>\n            <p> {cell.sku} </p>\n        </div>\n    )\n}\n\nrender(\n    <div>\n        <BranchChart {...config}/>\n    </div>\n    , document.getElementById('container'), () => {\n        console.log('chart render compelete');\n    }\n);\n"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "/**\n * Created by Ryanchill on 2018/3/19.\n */\nimport React, { Component } from 'react';\n\n/*\n\nchartConfig = {\n    height:480\n    branchNum:5 分支数量\n    direction: left right both\n    color:'sting' | ['#ccc','#asdf'];\n    pointColor:sting' | ['#ccc','#asdf'];\n}\ndata = [\n    {\n        name:xxx,\n        sku:xxx,\n        imgSrc:xxx\n    },{\n\n    }\n]\n\n*/\n\n\nclass BranchChart extends Component {\n\n    constructor(props) {\n        90\n        super(props);\n        this.initState(props.chart);\n    }\n\n    initState = (obj = {}) => {\n        this.state = {\n            height: obj.height || 480,\n            branchNum: obj.branchNum || 5,\n            direction: obj.direction || 'left',\n            color: obj.color || '#deeafc',\n            pointColor: obj.pointColor || '#b9cff5'\n        }\n    }\n\n    generateSVGElems = (dataNum, direction) => {\n        const nodeArray = [];\n        const COMPONENT_HEIGHT = 600; // viewBox 高度\n        const posix = direction === 'left' ? -1 : 1;\n\n        for (let i = 0; i < dataNum; i++) {\n            let centerPos = COMPONENT_HEIGHT / 2\n            let yPos = Math.floor((COMPONENT_HEIGHT / (dataNum + 2) * (i + 1)) - centerPos);\n            // 修正参数\n            let k = Math.floor((1 + yPos / centerPos) * 10);\n\n            console.log(yPos, k);\n            let node = (\n                <g g-id={i}>\n                    <path d={`M -400 ${yPos} C -30 ${yPos - k} -300 -50  -40 -50 L 0 -50`} fill='none' stroke='RGB(222, 234, 252)' strokeWidth='30'></path>\n                    <circle cx='-400' cy={yPos} r='20' fill='#b9cff5'></circle>\n                    <text x='-405' y={yPos + 8} stroke='none' fill='#ffffff' fontSize='20'>{i + 1} </text>\n                    <circle cx='-40' cy={yPos - k} r='5' fill='red' ></circle>\n                    <circle cx='-300' cy='-50' r='5' fill='green' ></circle>\n                </g>\n            )\n\n            nodeArray.push(node);\n\n            if (i == dataNum - 1) {\n                nodeArray.push(\n                    <g className='decoration-line'>\n                        <path d={`M -500 ${yPos + 80} C 30 ${yPos + 80} -320 -50  -10 -50 L 0 -50`} fill='none' stroke='RGB(222, 234, 252)' strokeWidth='10'></path>\n                        <circle cx='-500' cy={yPos + 80} r='10' fill='#b9cff5'></circle>\n                        <circle cx='30' cy={yPos + 80} r='5' fill='yellow'></circle>\n                        <circle cx='-320' cy='-50' r='5' fill='blue'></circle>\n                    </g>\n                )\n            }\n        }\n        return nodeArray;\n    }\n\n\n    render() {\n        let { direction, branchNum, height } = this.state;\n        let { data } = this.props;\n        let test = this.generateSVGElems(branchNum, direction);\n        return (\n            <div className='branch-chart-wrapper' style={{ height: height }}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width='100%' height='100%' viewBox='-400 -300 800 600' preserveAspectRatio=\"xMidYMid meet\">\n                    {/* <rect x='-50' y='-50' width='100' height='100' fill='#ccc'> </rect> */}\n                    <g id=\"left\" >\n                        {test}\n                    </g>\n                    {/* <g id=\"right\" fill='red' transform='scale(-1,1) translate(-50)'>\n                        {test}\n                    </g> */}\n                </svg>\n            </div>\n        );\n    }\n}\n\n\nexport default BranchChart;\n"
    }
  ]
}