{
  "title": "commonJS_vs_ES6_import.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "/*\n\n node  1.common.js  -> require\n       2.es6        -> .mjs 后缀 -> import()\n \n CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。\n ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。\n 换句话说，ES6 的import有点像 Unix 系统的\"符号连接\"，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。\n \n // ES6 加载commonJS 模块\n // CommonJS 模块的输出都定义在module.exports这个属性上面。Node 的import命令加载 CommonJS 模块，Node 会自动将module.exports属性，当作模块的默认输出，即等同于export default xxx。\n       \n*/\n\n// export-default.js\nexport default function () {\n  console.log('foo');\n}\n// 上面代码是一个模块文件export-default.js，它的默认输出是一个函数。\n\n// 其他模块加载该模块时，import命令可以为该匿名函数指定任意名字。\n\n// import-default.js\nimport customName from './export-default';\ncustomName(); // 'foo'\n\n\n// export 和 import 混合写法\nexport { foo, bar } from 'my_module';\n// 可以简单理解为\nimport { foo, bar } from 'my_module';\nexport { foo, bar };\n\n\n// 引擎处理import语句是在编译时，这时不会去分析或执行if语句，所以import语句放在if代码块之中毫无意义，因此会报句法错误，而不是执行时错误。\n// import和export命令只能在模块的顶层，不能在代码块之中（比如，在if代码块之中，或在函数之中）。\n\n\n// import 语句 和 import方法是不一样的！！\n\n\n\n// 给reactComponent 起别名\nimport { default as Mp } from './component/GraceMiniPagination'\nrender -> <Mp></Mp>"
    }
  ]
}