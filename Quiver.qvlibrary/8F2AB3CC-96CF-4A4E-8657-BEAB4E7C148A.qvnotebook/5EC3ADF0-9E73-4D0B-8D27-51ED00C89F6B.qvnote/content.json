{
  "title": "How babel transfer ES6 modules",
  "cells": [
    {
      "type": "text",
      "data": "模块导出"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "export const InlineExport = { }\nconst NormalExport = { }\nconst RenameExport = { }\nconst DefaultExport = { }\n\nexport { NormalExport }\nexport { RenameExport as HasRenamed }\nexport default DefaultExport\n\n// 转换后\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar InlineExport = exports.InlineExport = {};\nvar NormalExport = {};\nvar RenameExport = {};\nvar DefaultExport = {};\n\nexports.NormalExport = NormalExport;\nexports.HasRenamed = RenameExport;\nexports.default = DefaultExport;"
    },
    {
      "type": "text",
      "data": "<div>模块导出</div>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "import { NormalExport } from 'normal'\nimport { HasRenamed as RenameAgain } from 'rename'\nimport DefaultExport from 'default'\nimport * as All from 'all'\n\nNormalExport()\nRenameAgain()\nDefaultExport()\nAll()\n\n// 转换后\n'use strict';\n\nvar _normal = require('normal');\nvar _rename = require('rename');\n\nvar _default = require('default');\nvar _default2 = _interopRequireDefault(_default);\n\nvar _all = require('all');\nvar all = _interopRequireWildcard(_all);\n\n(0, _normal.NormalExport)();\n(0, _rename.HasRenamed)();\n(0, _default2.default)();\nall.hello();\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule\n    ? obj\n    : { default: obj };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key))\n          newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}"
    },
    {
      "type": "text",
      "data": "commonJS 方案特点<div>1. 所有要输出的对象全部去挂载在 module.eports 上</div><div>2. 通过 require 加载别的模块 ，require 的返回值是暴露给模块的对象</div><div>3. commonJS 是一个单对象输出 单对象加载的模型</div>"
    },
    {
      "type": "text",
      "data": "Es6 方案特点<div>1. 可以通过export 任意导出模块内部的引用</div><div>&nbsp; - export {A,B}</div><div>&nbsp; - export {A as a , B}</div><div>&nbsp; - export default A</div><div>&nbsp; - export const A = {}</div><div>2. 可以加载模块中输出的任意引用</div><div>3. ❗️ ES_modules 是一个多对象输出 多对象加载的模型</div>"
    },
    {
      "type": "text",
      "data": "Babel 怎么实现ES6的模块转换<div><br><div>1.<span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\">Babel 依然通过&nbsp;</span><code class=\"highlighter-rouge\" style=\"color: rgb(249, 38, 114); font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2;\">exports</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\">&nbsp;对象来输出模块内的引用，但是增加了一个特殊的&nbsp;</span><code class=\"highlighter-rouge\" style=\"color: rgb(249, 38, 114); font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2;\">exports.default</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\">&nbsp;属性用来实现 ES6 的默认输出对象。并且依然通过&nbsp;</span><code class=\"highlighter-rouge\" style=\"color: rgb(249, 38, 114); font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2;\">require</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\">&nbsp;来实现模块的加载。</span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\">2. __esModule 作用</span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34);\"><br></span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">给模块的输出对象增加&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">__esModule</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;是为了将不符合 Babel 要求的 CommonJS 模块转换成符合要求的模块，这一点在&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">require</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;的时候体现出来。如果加载模块之后，发现加载的模块带着一个&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">__esModule</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;属性，Babel 就知道这个模块肯定是它转换过的，这样 Babel 就可以放心地从加载的模块中调用&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">exports.default</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;这个导出的对象，也就是 ES6 规定的默认导出对象，所以这个模块既符合 CommonJS 标准，又符合 Babel 对 ES6 模块化的需求。</span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\"><br></span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">然而如果&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">__esModule</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;不存在，也没关系，Babel 在加载了一个检测不到&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">__esModule</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;的模块时，它就知道这个模块虽然符合 CommonJS 标准，但可能是一个第三方的模块，Babel 没有转换过它，如果以后直接调用&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">exports.default</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;是会出错的，所以现在就给它补上一个&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">default</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;属性，就干脆让&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; background-color: rgb(40, 40, 40); padding: 1px 5px; color: rgb(249, 38, 114); font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; font-size: 12px;\">default</code><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">&nbsp;属性指向它自己就好了，这样以后就不会出错了。</span><br></div></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\"><br></span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">3. 调用import 进来的模块的时候为什么要使用逗号表达式</span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\"><br></span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\">- 语言特性: 逗号表达式等于最后一个逗号之后的表达式的值</span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\"><br></span></div><div><span style=\"color: rgb(234, 234, 234); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Arial, sans-serif; font-variant-ligatures: normal; orphans: 2; text-align: justify; widows: 2; background-color: rgb(39, 40, 34); font-size: 12px;\"><span style=\"font-size: 12px; color: rgb(234, 234, 234); background-color: rgb(39, 40, 34); font-variant-ligatures: normal;\">如果执行&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; padding: 1px 5px; font-size: 12px; background-color: rgb(40, 40, 40); color: rgb(249, 38, 114); font-variant-ligatures: normal;\">(0, foo.bar)()</code><span style=\"font-size: 12px; color: rgb(234, 234, 234); background-color: rgb(39, 40, 34); font-variant-ligatures: normal;\">，这个逗号表达式等价于执行&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; padding: 1px 5px; font-size: 12px; background-color: rgb(40, 40, 40); color: rgb(249, 38, 114); font-variant-ligatures: normal;\">foo.bar()</code><span style=\"font-size: 12px; color: rgb(234, 234, 234); background-color: rgb(39, 40, 34); font-variant-ligatures: normal;\">，但是执行时的上下文环境会被绑定到全局对象身上，所以实际上真正等价于执行&nbsp;</span><code class=\"highlighter-rouge\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Liberation Mono&quot;, &quot;Courier New&quot;, monospace; padding: 1px 5px; font-size: 12px; background-color: rgb(40, 40, 40); color: rgb(249, 38, 114); font-variant-ligatures: normal;\">foo.bar.call(GLOBAL_OBJECT)</code><span style=\"font-size: 12px; color: rgb(234, 234, 234); background-color: rgb(39, 40, 34); font-variant-ligatures: normal;\">。</span><br></span></div>"
    },
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}