{
  "title": "ES6_useful",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "// 1.ES6 标准promise的函数\n\n// 生成promise 实例\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n// promise 实例生成之后\n// then catch\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n// 生成新的promise对象\n// all\nconst p = Promise.all([p1, p2, p3]);\n//race\nconst p = Promise.race([p1, p2, p3]);\n\n\n// done() 在调用链的结尾使用\n\n// finally()\n\n\n\n// ES7 async await\n// await 接收的是一个promise 这意味着所有的能够最终生promise的都能被await接收\n// 其实可以接受任何类型\n\nfunction timeout(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nasync function asyncPrint(value, ms) {\n  await timeout(ms);\n  console.log(value)\n}\n\nasyncPrint('hello world', 50);\n\n\n// 解构\n\nfunction demoR (...arguemts){\n  console.log(arguemts)\n}\n\ndemoR(1,2,3,5,6); // [1,2,3,5,6]\ndemoR(['a','b','c']); //[[\"a\",\"b\",\"c\"]]\n"
    }
  ]
}