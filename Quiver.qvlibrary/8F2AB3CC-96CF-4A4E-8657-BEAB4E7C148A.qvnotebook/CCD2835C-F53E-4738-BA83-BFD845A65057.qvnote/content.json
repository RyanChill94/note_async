{
  "title": "package in Babel",
  "cells": [
    {
      "type": "text",
      "data": "Package"
    },
    {
      "type": "text",
      "data": "<div><br></div><div>1.babel-cli<br></div><div>提供命令行支持</div><div><br></div><div>2.babel-core</div><div>babel 核心包，包含核心api，将js代码变成 AST 抽象语法树</div><div><br></div><div>3.babel-external-helper</div><div>生成全局辅助函数，包含所有的helper 函数</div><div><br></div><div><pre class=\"hljs bash\" style=\"line-height: 1.42857; background-color: rgb(40, 44, 52); box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 15px; margin-top: 0px; margin-bottom: 20px; overflow-wrap: normal; border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2; word-break: break-word !important;\"><code class=\"bash\" style=\"font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-style: none; color: inherit; box-sizing: border-box; vertical-align: middle;\">node_modules/.bin/babel-external-helpers &gt; helpers.js</code></pre></div><div>需要添加一个plugin 【babel-plugin-external-helper】</div><div><br></div><div><pre class=\"hljs json\" style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 15px; margin-top: 0px; margin-bottom: 20px; line-height: 1.42857; overflow-wrap: normal; background-color: rgb(40, 44, 52); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2; word-break: break-word !important; background-position: initial initial; background-repeat: initial initial;\"><code class=\"json\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-style: none; vertical-align: middle;\">{\n    <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">\"plugins\"</span>: [<span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">\"external-helpers\"</span>]\n}</code></pre></div><div>避免重复引用辅助函数，导致代码冗余</div><div><br></div><div>注意：</div><div>如果使用了 babel-runtime，就不需要先生成helper.js了</div><div><br></div><div>4.babel-node&nbsp;</div><div>node 执行脚本</div><div><br></div><div>5. Babel-register</div><div>改写 node 中 require 钩子， require其他模块的时候会触发babel 的编译</div><div><br></div><div><pre class=\"hljs javascript\" style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 15px; margin-top: 0px; margin-bottom: 20px; line-height: 1.42857; overflow-wrap: normal; background-color: rgb(40, 44, 52); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2; word-break: break-word !important; background-position: initial initial; background-repeat: initial initial;\"><code class=\"javascript\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-style: none; vertical-align: middle;\"><span class=\"hljs-built_in\" style=\"box-sizing: border-box; color: rgb(230, 192, 123);\">require</span>(<span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">'babel-register'</span>)({ <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">presets</span>: [<span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">'react'</span>] });\n<span class=\"hljs-built_in\" style=\"box-sizing: border-box; color: rgb(230, 192, 123);\">require</span>(<span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">'./test'</span>)</code></pre></div><div>实时编译，执行的时候编译，不需要输出文件<br><br></div><div>6. Babel-runtime</div><div>供编译模块复用工具函数</div><div>1. 实例方法 2.非实例方法 Object.assign 3. helper中的函数 自动引用polyfill</div><div><br></div><div><div><li>避免 babel 编译的工具函数在每个模块里重复出现，减小库和工具包的体积；</li>\n<li>在没有使用 babel-runtime 之前，库和工具包一般不会直接引入 polyfill。否则像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了；</li></div><br></div><div>7. core.js</div><div>javascript 组合式标准化库 包含 es5、ES6 promise Symbol &nbsp;collection Iterators.. es7+ 提案等的polyfills实现</div><div><br></div><div>8. Regenerator</div><div>实现了 generator/yeild async/await</div><div><br></div><div>9. babel-polyfill</div><div>Babel 默认只转化新的 js 语法，而不转新的api，例如，<code>Iterator</code>、<code>Generator</code>、<code>Set</code>、<code>Maps</code>、<code>Proxy</code>、<code>Reflect</code>、<code>Symbol</code>、<code>Promise</code> 等全局对象，以及一些定义在全局对象上的方法（比如 <code>Object.assign</code>）都不会转译。如果想使用这些新的对象和方法，必须使用 <code>babel-polyfill</code>，为当前环境提供一个垫片。</div><div><div>\n<p>不同于 <code>babel-runtime</code> 的是，<code>babel-polyfill</code> 是一次性引入你的项目中的，就像是 <code>React</code> 包一样，同项目代码一起编译到生产环境。</p></div><br></div><div>10 babel-env<br></div><div>Ref:<a href=\"http://2ality.com/2017/02/babel-preset-env.html\">http://2ality.com/2017/02/babel-preset-env.html</a></div><div>特性：</div><div>- 替换之前所有 babel-parsets-es20XX</div><div>- 替换 @babel/pulgin-transform-runtime 的使用</div><div><br></div><div><font face=\"Menlo\" color=\"#ff0000\">“不包含stage-x插件，支持最新版本的stage-4语法”</font></div><div><br></div><div>主要配置项</div><div>- target 设置支持环境</div><div><br></div><div>```js</div><div><pre class=\"hljs json\" style=\"box-sizing: border-box; overflow: auto; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; padding: 15px; margin-top: 0px; margin-bottom: 20px; line-height: 1.42857; overflow-wrap: normal; background-color: rgb(40, 44, 52); border: 1px solid rgb(204, 204, 204); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; font-variant-ligatures: normal; orphans: 2; widows: 2; word-break: break-word !important; background-position: initial initial; background-repeat: initial initial;\"><code class=\"json\" style=\"box-sizing: border-box; font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace; color: inherit; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; border-style: none; vertical-align: middle;\"> <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">\"targets\"</span>: {\n        <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">\"node\"</span>: <span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">\"current\"</span>,\n        <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">\"chrome\"</span>: <span class=\"hljs-number\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">52</span>,\n        <span class=\"hljs-attr\" style=\"box-sizing: border-box; color: rgb(209, 154, 102);\">\"browsers\"</span>: [<span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">\"last 2 versions\"</span>, <span class=\"hljs-string\" style=\"box-sizing: border-box; color: rgb(152, 195, 121);\">\"safari 7\"</span>]\n      }</code></pre></div><div>```&nbsp;</div><div><br></div><div>- modules 设置模块转化规则</div><div>可选项包括 ‘umd’ ‘amd’ ‘systemjs’ ’commonjs’ |fasle</div><div>设置为false 表示交由 webpack 来处理模块化 【treeShaking】</div><div><br></div><div>- useBuiltIns&nbsp;</div><div>可选项&nbsp;</div><div>- usage 在文件需要的位置单独按需引入，可以保证每个bundle中只引入一份</div><div>存疑?</div><div>这个模式类似于 @babel/pulgin-transform-truntime 不会造成全局污染 ，partial级别&nbsp;</div><div>能否自动引入新的实例方法？ Ex ’foobar’.includes(‘foo')</div><div><br></div><div style=\"orphans: 2; widows: 2;\">- entry 项目入口引用一次</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">- false</div><div style=\"orphans: 2; widows: 2;\">不在代码中使用polyfill</div><div style=\"orphans: 2; widows: 2;\"><br></div><div style=\"orphans: 2; widows: 2;\">11。 @babel/preset-stage-x</div><div style=\"orphans: 2; widows: 2;\"><div><p>The TC39 categorizes proposals into the following stages:</p>\n<ul>\n<li>Stage 0 - Strawman: just an idea, possible Babel plugin.</li>\n<li>Stage 1 - Proposal: this is worth working on.</li>\n<li>Stage 2 - Draft: initial spec.</li>\n<li>Stage 3 - Candidate: complete spec and initial browser implementations.</li>\n<li>Stage 4 - Finished: will be added to the next yearly release.</li></ul></div></div>"
    },
    {
      "type": "text",
      "data": "<div>Plugin<br></div>"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}