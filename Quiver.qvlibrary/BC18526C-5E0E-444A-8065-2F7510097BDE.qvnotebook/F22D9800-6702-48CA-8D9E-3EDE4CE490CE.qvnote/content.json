{
  "title": "webpack.config.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "var webpack = require('webpack');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar WebpackMd5Hash = require('webpack-md5-hash');\nvar HashedModuleIdsPlugin = require('./HashedModuleIdsPlugin');\nvar CleanWebpackPlugin = require('clean-webpack-plugin');\nvar AssetsPlugin = require('assets-webpack-plugin');\nvar OfflinePlugin = require('offline-plugin');\nvar UglifyJSPlugin = require('uglifyjs-webpack-plugin');\nvar HtmlWebpackIncludeAssetsPlugin = require('html-webpack-include-assets-plugin');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nvar precss = require('precss');\n\n\n// var path = requie\nvar glob = require('glob');\n\n// 辅助函数\nvar utils = require('./utils');\nvar fullPath  = utils.fullPath;\nvar pickFiles = utils.pickFiles;\nvar path = require('path');\n\n// 项目根路径\nvar ROOT_PATH = fullPath('../');\n\n// 项目源码路径\nvar SRC_PATH = ROOT_PATH + '/src';\n// 项目静态文件路径\nvar STATIC_PATH = SRC_PATH+'/static';\n// 项目页面文件路径\nvar VIEWS_PATH = SRC_PATH+'/views';\n\n// 产出路径\nvar DIST_PATH = ROOT_PATH + '/build';\n\n// node_modules\nvar NODE_MODULES_PATH =  ROOT_PATH + '/node_modules';\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar args = process.argv;\nvar uglify = args.indexOf('--uglify') > -1;\n\n\n\nvar alias = {\n  'react-router-dom': NODE_MODULES_PATH + '/react-router-dom/index.js',\n  'react-router': NODE_MODULES_PATH + '/react-router/index.js',\n  'react-redux': NODE_MODULES_PATH + '/react-redux/lib/index.js',\n  'redux': NODE_MODULES_PATH + '/redux/lib/index.js',\n  'redux-thunk': NODE_MODULES_PATH + '/redux-thunk/lib/index.js',\n  \"babel-polyfill\": NODE_MODULES_PATH + '/babel-polyfill/lib/index.js',\n  'util': SRC_PATH+\"/static/js/util/main.js\",\n  'css': SRC_PATH+\"/static/css\",\n   //这里必须加上别名，不然homepage/main.js 里异步加载js，会找不到module\n  'market': SRC_PATH + \"/static/js/market/main.js\",\n  'user': SRC_PATH + \"/static/js/user/main.js\",\n  'noauthorize': SRC_PATH + \"/static/js/noauthorize/main.js\",\n  'tmplogin': SRC_PATH + \"/static/js/tmplogin/main.js\",\n  'shopstate': SRC_PATH + \"/static/js/shopstate/main.js\",\n  'realtime': SRC_PATH + \"/static/js/realtime/main.js\",\n 'indicatorTrends': SRC_PATH + \"/static/js/realtime/containers/CindicatorDetail.js\",\n 'productDetail': SRC_PATH + \"/static/js/realtime/containers/CproductDetail.js\",\n  'componentsdemo': SRC_PATH + \"/static/js/componentsdemo/main.js\",\n};\n\nvar libsTrunk = [];\n//每个业务目录下的main文件都是一个entry\n//业务组件作为一个独立的entry\nfunction getEntry(){\n  var entry = {};\n\n  glob.sync(ROOT_PATH+'/src/static/js/**/*.js').forEach(function(name){\n      var n = name.slice(name.lastIndexOf('/src/')+5,name.length-3);\n      // var n = name.replace(/^\\/src\\/static\\/js\\/|\\/main$/g,\"\");\n// console.log(\"name=============\",name);\n      // console.log(\"n=============\",n);\n      if(! (/lib|util/.test(name)) && name.indexOf('main.js')>0  ){\n         \n         entry[n] = [name];\n      }else if(  /lib/.test(name)  ){\n         entry[n] = [name];\n        libsTrunk.push(n);\n      }\n\n  });\n  return entry;\n\n}\nvar entries = Object.assign(getEntry(), {\n      \"static/js/lib/vendor\": [\n        'react', 'react-dom', 'react-router-dom',\n        'redux', 'react-redux', 'redux-thunk',\"babel-polyfill\"\n      ],\n      \"static/js/util/main\": [ROOT_PATH+\"/src/static/js/util/main\"]\n      // \"static/js/todos/app\":[STATIC_PATH+'/js/todos/index.js']\n      }\n    );\n// console.log(entries);\n// console.log('.......................', entries);\n\nvar config = {\n  context: SRC_PATH,\n  \n  entry: entries,\n  output: {\n    path: DIST_PATH,\n    publicPath: \"/\",\n    // chunkhash 不能与 --hot 同时使用\n    // see https://github.com/webpack/webpack-dev-server/issues/377\n\n     filename: __DEV__?\"[name].[hash].js\":\"[name].[chunkhash:8].js\",\n\n  },\n  module: {},\n  resolve: {\n    alias: alias,\n    modules: [NODE_MODULES_PATH, DIST_PATH]\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      // http://stackoverflow.com/questions/30030031/passing-environment-dependent-variables-in-webpack\n      \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || 'development')\n    }),\n    // new webpack.DllReferencePlugin({\n    //     context: __dirname,\n    //     manifest: require('./build/vendor-manifest.json'),\n    // }),\n    // new CopyWebpackPlugin([{ \n    //         context: __dirname,\n    //         from: './build/vendor.261a1d1f.js', \n    //         to: DIST_PATH+'/static/js/lib/'\n    //     }]),\n    // new HtmlWebpackIncludeAssetsPlugin({\n    //     assets: [DIST_PATH+'/static/js/lib/vendor.261a1d1f.js'],\n    //     append: false,\n    //     hash: false\n    // }),\n    new webpack.optimize.CommonsChunkPlugin({\n      names: ['static/js/util/main', 'static/js/lib/vendor', 'manifest']\n      // names: ['static/js/util/main']\n    }),\n    \n  \n    // 生成源文件与目标文件映射表  ../ webpack-assets.json\n    new AssetsPlugin(),\n  \n  ],\n  module: {\n    loaders:[\n// 使用 babel 编译 jsx、es6\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        // 这里使用 loaders ，因为后面还需要添加 loader\n        loaders: ['babel-loader?cacheDirectory=' + CACHE_PATH]\n      },\n       {\n        test: /\\.(?:jpg|gif|png|svg|ico)$/,\n       \n        loaders: [\n          'url-loader?limit=2048&name=static/img/[hash:8].[ext]',\n          'image-webpack-loader'\n        ]\n      },\n      {\n          test: /manifest\\.json$/,\n          loader: 'w3c-manifest-loader',\n          query: {\n              name: '[name].[ext]',\n              icon: '[name].[ext]',\n              legacyAppleSupport: true\n          }\n      }\n     \n\n               \n    ]}\n};\n\n\n// loaders\nvar CACHE_PATH = ROOT_PATH + '/cache';\n// config.module.loaders = [];\n\n\n\n// config.module.loaders.push({\n//   test: /\\.html$/,\n//   // exclude: /node_modules/,\n//   loaders: ['file-loader?name=[path][name].html','extract-loader','html-loader']\n// });\n\n// 编译 sass\n// if (__DEV__) {\n//   config.module.loaders.push({\n//     test: /\\.(scss|css)$/,\n//     loaders: ['style-loader', 'css-loader', \n//         'sass-loader',\n//          { loader:'postcss-loader',\n//           options: {\n//             parser: 'postcss-scss',\n//             plugins: [ require('autoprefixer')(\n//             // {  \n//             //     browsers:['last 2 Chrome versions']\n//             //  }\n//               ), require('postcss-flexbugs-fixes')]\n          \n//         }\n//       }\n//         ]\n//   });\n\n// } else {\n\n  config.module.loaders.push({\n    test: /\\.(scss|css)$/,\n    loaders: ExtractTextPlugin.extract({ fallback:'style-loader', use:[{loader:'css-loader', options:{minimize: true} },\n        'sass-loader',\n        { loader:'postcss-loader',\n          options: {\n            parser: 'postcss-scss',\n            plugins: [ require('autoprefixer')(\n            // {  \n            //     browsers:['last 2 Chrome versions']\n            //  }\n              ), require('postcss-flexbugs-fixes')]\n          \n        }\n      } ]})\n  });\n\n\n  config.plugins.push(\n    new ExtractTextPlugin({\n      filename:  (getPath) => {\n        \n        return getPath('css/[name].[contenthash:8].css').replace('css/static/js', 'static/css');\n      },\n      allChunks: true\n    })\n  );\n// }\n\n\n\n\n// 压缩 js\nif (uglify) {\n  config.plugins.push(\n    // new webpack.optimize.UglifyJsPlugin({\n    //   compress: {\n    //     warnings: false,\n    //     drop_console: true\n    //   },\n    //   output: {\n    //     comments: false\n    //   }\n    // })\n\n    new UglifyJSPlugin({\n      uglifyOptions: {\n        compress: {\n          drop_console: true\n        }\n      }\n    })\n  );\n}\n\n\n\nconfig.plugins.push(\n  new CleanWebpackPlugin(\n    [DIST_PATH],{\n        root: ROOT_PATH, // An absolute path for the root  of webpack.config.js\n        verbose: true,// Write logs to console.\n        dry: false // Do not delete anything, good for testing.\n    }\n  )\n);\n//添加离线缓存,这个插件最好是放在底部\nconfig.plugins.push(\n   new OfflinePlugin({\n        safeToUseOptionalCaches: true,\n      \n\n        AppCache: false,\n        //每1分钟检测sw.js是否有更新\n        autoUpdate: 1000 * 60 * 1,\n        ServiceWorker:{\n          events: true,\n\n          prefetchRequest:{ mode: 'no-cors', credentials: 'include'},\n          \n\n          //文件名不变可能不会清缓存\n          // output:''\n          // publicPath: \"/\"+ (new Date().getTime()) + \".js\"\n       \n          // 设置绝对路径，不然可能会出现 //sw.js 导致注册路径不正常，sw不生效\n          // sw要注册到根路径下\n          publicPath:\"/sw.js\",\n          //sw.js文件压缩\n          // minify: true\n        },\n        excludes:['js/util/manifest.json','manifest.json'],\n        //如果用了网络优先，缓存基本失效了==\n        responseStrategy: 'network-first',\n        //如果设置为true， sw的路径会用相对路径获取，会出现找不到的问题\n        // relativePaths: true,\n        // updateStrategy: 'changed',\n        externals:['/m/realtime/deal','/m/realtime/product', \n            '/m/realtime/viewflow','/m/shopstate/deal',\n            '/m/shopstate/product','/m/shopstate/viewflow',\n            '/m/shopstate/deal/detail',\n            '/m/shopstate/product/detail',\n            '/m/realtime/deal/detail',\n            '/m/realtime/product/detail',\n            '/m/user/system',\n            '/m/market/realtime','/m/market/salerboard',\n            '/m/market/proboard','/m/market/brandboard']\n    })\n);\n\n// html 页面\n//根据业务目录，动态生成html\n//动态设置chunks\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\n//遍历views目录，根据最后一级目录名称，找到js文件\n//index.html上级目录名称要与js main文件上级目录名称完全一致\n//设置filename和template\nvar tmlwebpackPluginObj = [];\nvar trunks = ['manifest','static/js/lib/vendor', 'static/js/util/main'].concat(libsTrunk);\n\nvar getHtml = function(){\n  \n  var config = {\n    filename: DIST_PATH+'/views/homepage/index.html',\n    // chunks: ['static/js/todos/main', 'static/js/lib/vendor'],\n    chunks: trunks,\n    template: SRC_PATH + '/views/homepage/index.html',\n    minify: __DEV__ ? false : {\n      collapseWhitespace: true,\n      collapseInlineTagWhitespace: true,\n      removeRedundantAttributes: true,\n      removeEmptyAttributes: true,\n      removeScriptTypeAttributes: true,\n      removeStyleLinkTypeAttributes: true,\n      removeComments: true\n    }\n  };\n  //根据html找js文件\n  glob.sync(ROOT_PATH+'/src/views/**/*.html').forEach(function(name){\n      var tmpCfg = Object.assign({}, config);\n      //因为是Object.assign不是深拷贝，需要重新覆盖一次trunks的赋值\n      // tmpCfg.chunks =  [].concat(trunks);\n\n      if(name.indexOf('/common/')>0){\n        return ;\n      }\n      var n = name.slice(name.lastIndexOf('/src')+4,name.length);\n\n      tmpCfg.filename = DIST_PATH + n ;\n      tmpCfg.template = name;\n      var jsPath = (function(){\n      \n        var pname = n.match(/([0-9 a-z A-Z]+)\\/[0-9 a-z A-Z \\.]+$/)[1];\n        //第一个tab页 realtime\n        var realtime = \"\";\n        var value = [];\n        for(var key in entries){\n          if(new RegExp(pname+\"\\/[a-z A-Z]+$\").test(key)){\n            value.push( key);\n            // break;\n          }\n        }\n        return value;\n      })();\n      \n      tmpCfg.chunks.push(...jsPath);\n      console.log('tmpCfg.chunks ', tmpCfg.chunks);\n\n      tmlwebpackPluginObj.push(new HtmlwebpackPlugin(tmpCfg));\n  \n  });\n\n}\nconsole.log('tmlwebpackPluginObj', tmlwebpackPluginObj);\ngetHtml();\nconfig.plugins.push(...tmlwebpackPluginObj);\n\n// 内嵌 flexible 到 html 页面\n// config.plugins.push(function() {\n//   this.plugin('compilation', function(compilation) {\n//     compilation.plugin('html-webpack-plugin-after-emit', function(file, callback) {\n//       var flexible = '';\n//       Object.keys(compilation.assets).forEach(function(filename) {\n//         // console.log('==== filename ====', filename);\n\n//         if (/flexible/.test(filename)) {\n//           flexible = '<script>' + compilation.assets[filename].source() + '</script>';\n//         }\n//       });\n//       // console.log(' ==== flexible ===', flexible );\n      \n//       if (flexible) {\n//         var htmlSource = file.html.source();\n//         htmlSource = htmlSource.replace(/(<\\/body>)/, flexible + '$1');\n//         file.html.source = function() {\n//           return htmlSource;\n//         };\n//       }\n//       callback(null, file);\n//     });\n//   });\n// });\n\n\n\nmodule.exports = config;\n\n\n\n\n"
    }
  ]
}