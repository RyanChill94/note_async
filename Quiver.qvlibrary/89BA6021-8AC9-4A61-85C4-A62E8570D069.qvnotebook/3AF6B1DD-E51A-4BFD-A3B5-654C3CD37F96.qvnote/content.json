{
  "title": "sw.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "'use strict';\n\nconst version = 'v20160443';\nconst __DEVELOPMENT__ = false;\nconst __DEBUG__ = false;\nconst offlineResources = [\n  '/',\n  '/offline.html',\n  '/offline.svg'\n];\n\nconst ignoreFetch = [\n  /https?:\\/\\/cdn.bootcss.com\\//,\n  /https?:\\/\\/static.duoshuo.com\\//,\n  /https?:\\/\\/www.google-analytics.com\\//,\n  /https?:\\/\\/dn-lbstatics.qbox.me\\//,\n  /https?:\\/\\/ajax.cloudflare.com\\//,\n];\n\n\n//////////\n// Install\n//////////\nfunction onInstall(event) {\n  log('install event in progress.');\n\n  event.waitUntil(updateStaticCache());\n}\n\nfunction updateStaticCache() {\n  return caches\n    .open(cacheKey('offline'))\n    .then((cache) => {\n      return cache.addAll(offlineResources);\n    })\n    .then(() => {\n      log('installation complete!');\n    });\n}\n\n////////\n// Fetch\n////////\nfunction onFetch(event) {\n  const request = event.request;\n\n  if (shouldAlwaysFetch(request)) {\n    event.respondWith(networkedOrOffline(request));\n    return;\n  }\n\n  if (shouldFetchAndCache(request)) {\n    event.respondWith(networkedOrCached(request));\n    return;\n  }\n\n  event.respondWith(cachedOrNetworked(request));\n}\n\nfunction networkedOrCached(request) {\n  return networkedAndCache(request)\n    .catch(() => { return cachedOrOffline(request) });\n}\n\n// Stash response in cache as side-effect of network request\nfunction networkedAndCache(request) {\n  return fetch(request)\n    .then((response) => {\n      var copy = response.clone();\n      caches.open(cacheKey('resources'))\n        .then((cache) => {\n          cache.put(request, copy);\n        });\n\n      log(\"(network: cache write)\", request.method, request.url);\n      return response;\n    });\n}\n\nfunction cachedOrNetworked(request) {\n  return caches.match(request)\n    .then((response) => {\n      log(response ? '(cached)' : '(network: cache miss)', request.method, request.url);\n      return response ||\n        networkedAndCache(request)\n          .catch(() => { return offlineResponse(request) });\n    });\n}\n\nfunction networkedOrOffline(request) {\n  return fetch(request)\n    .then((response) => {\n      log('(network)', request.method, request.url);\n      return response;\n    })\n    .catch(() => {\n      return offlineResponse(request);\n    });\n}\n\nfunction cachedOrOffline(request) {\n  return caches\n    .match(request)\n    .then((response) => {\n      return response || offlineResponse(request);\n    });\n}\n\nfunction offlineResponse(request) {\n  log('(offline)', request.method, request.url);\n  if (request.url.match(/\\.(jpg|png|gif|svg|jpeg)(\\?.*)?$/)) {\n    return caches.match('/offline.svg');\n  } else {\n    return caches.match('/offline.html');\n  }\n}\n\n///////////\n// Activate\n///////////\nfunction onActivate(event) {\n  log('activate event in progress.');\n  event.waitUntil(removeOldCache());\n}\n\nfunction removeOldCache() {\n  return caches\n    .keys()\n    .then((keys) => {\n      return Promise.all( // We return a promise that settles when all outdated caches are deleted.\n        keys\n         .filter((key) => {\n           return !key.startsWith(version); // Filter by keys that don't start with the latest version prefix.\n         })\n         .map((key) => {\n           return caches.delete(key); // Return a promise that's fulfilled when each outdated cache is deleted.\n         })\n      );\n    })\n    .then(() => {\n      log('removeOldCache completed.');\n    });\n}\n\nfunction cacheKey() {\n  return [version, ...arguments].join(':');\n}\n\nfunction log() {\n  if (developmentMode()) {\n    console.log(\"SW:\", ...arguments);\n  }\n}\n\nfunction shouldAlwaysFetch(request) {\n  return __DEVELOPMENT__ ||\n    request.method !== 'GET' ||\n      ignoreFetch.some(regex => request.url.match(regex));\n}\n\nfunction shouldFetchAndCache(request) {\n  return ~request.headers.get('Accept').indexOf('text/html');\n}\n\nfunction developmentMode() {\n  return __DEVELOPMENT__ || __DEBUG__;\n}\n\nlog(\"Hello from ServiceWorker land!\", version);\n\nself.addEventListener('install', onInstall);\n\nself.addEventListener('fetch', onFetch);\n\nself.addEventListener(\"activate\", onActivate);"
    }
  ]
}